// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/hadoop/cms/store/user/phchang/metis/wwwbaby/FR2018_v5.2.0/merged/ww_incl_pythia_1.root", "t", "frtree", "tas", "fr")

#ifndef frtree_H
#define frtree_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class frtree {
 private: 
 protected: 
  unsigned int index;
  int      run_;
  TBranch *run_branch;
  bool     run_isLoaded;
  int      lumi_;
  TBranch *lumi_branch;
  bool     lumi_isLoaded;
  unsigned long long evt_;
  TBranch *evt_branch;
  bool     evt_isLoaded;
  int      isData_;
  TBranch *isData_branch;
  bool     isData_isLoaded;
  float    evt_scale1fb_;
  TBranch *evt_scale1fb_branch;
  bool     evt_scale1fb_isLoaded;
  float    xsec_br_;
  TBranch *xsec_br_branch;
  bool     xsec_br_isLoaded;
  int      evt_passgoodrunlist_;
  TBranch *evt_passgoodrunlist_branch;
  bool     evt_passgoodrunlist_isLoaded;
  TString *CMS4path_;
  TBranch *CMS4path_branch;
  bool     CMS4path_isLoaded;
  int      CMS4index_;
  TBranch *CMS4index_branch;
  bool     CMS4index_isLoaded;
  float    weight_fr_r1_f1_;
  TBranch *weight_fr_r1_f1_branch;
  bool     weight_fr_r1_f1_isLoaded;
  float    weight_fr_r1_f2_;
  TBranch *weight_fr_r1_f2_branch;
  bool     weight_fr_r1_f2_isLoaded;
  float    weight_fr_r1_f0p5_;
  TBranch *weight_fr_r1_f0p5_branch;
  bool     weight_fr_r1_f0p5_isLoaded;
  float    weight_fr_r2_f1_;
  TBranch *weight_fr_r2_f1_branch;
  bool     weight_fr_r2_f1_isLoaded;
  float    weight_fr_r2_f2_;
  TBranch *weight_fr_r2_f2_branch;
  bool     weight_fr_r2_f2_isLoaded;
  float    weight_fr_r2_f0p5_;
  TBranch *weight_fr_r2_f0p5_branch;
  bool     weight_fr_r2_f0p5_isLoaded;
  float    weight_fr_r0p5_f1_;
  TBranch *weight_fr_r0p5_f1_branch;
  bool     weight_fr_r0p5_f1_isLoaded;
  float    weight_fr_r0p5_f2_;
  TBranch *weight_fr_r0p5_f2_branch;
  bool     weight_fr_r0p5_f2_isLoaded;
  float    weight_fr_r0p5_f0p5_;
  TBranch *weight_fr_r0p5_f0p5_branch;
  bool     weight_fr_r0p5_f0p5_isLoaded;
  float    weight_pdf_up_;
  TBranch *weight_pdf_up_branch;
  bool     weight_pdf_up_isLoaded;
  float    weight_pdf_down_;
  TBranch *weight_pdf_down_branch;
  bool     weight_pdf_down_isLoaded;
  float    weight_alphas_down_;
  TBranch *weight_alphas_down_branch;
  bool     weight_alphas_down_isLoaded;
  float    weight_alphas_up_;
  TBranch *weight_alphas_up_branch;
  bool     weight_alphas_up_isLoaded;
  float    weight_isr_;
  TBranch *weight_isr_branch;
  bool     weight_isr_isLoaded;
  float    weight_isr_up_;
  TBranch *weight_isr_up_branch;
  bool     weight_isr_up_isLoaded;
  float    weight_isr_down_;
  TBranch *weight_isr_down_branch;
  bool     weight_isr_down_isLoaded;
  int      HLT_DoubleMu_;
  TBranch *HLT_DoubleMu_branch;
  bool     HLT_DoubleMu_isLoaded;
  int      HLT_DoubleEl_;
  TBranch *HLT_DoubleEl_branch;
  bool     HLT_DoubleEl_isLoaded;
  int      HLT_DoubleEl_DZ_;
  TBranch *HLT_DoubleEl_DZ_branch;
  bool     HLT_DoubleEl_DZ_isLoaded;
  int      HLT_DoubleEl_DZ_2_;
  TBranch *HLT_DoubleEl_DZ_2_branch;
  bool     HLT_DoubleEl_DZ_2_isLoaded;
  int      HLT_MuEG_;
  TBranch *HLT_MuEG_branch;
  bool     HLT_MuEG_isLoaded;
  int      HLT_SingleEl8_;
  TBranch *HLT_SingleEl8_branch;
  bool     HLT_SingleEl8_isLoaded;
  int      HLT_SingleEl17_;
  TBranch *HLT_SingleEl17_branch;
  bool     HLT_SingleEl17_isLoaded;
  int      HLT_SingleIsoEl8_;
  TBranch *HLT_SingleIsoEl8_branch;
  bool     HLT_SingleIsoEl8_isLoaded;
  int      HLT_SingleIsoEl12_;
  TBranch *HLT_SingleIsoEl12_branch;
  bool     HLT_SingleIsoEl12_isLoaded;
  int      HLT_SingleIsoEl17_;
  TBranch *HLT_SingleIsoEl17_branch;
  bool     HLT_SingleIsoEl17_isLoaded;
  int      HLT_SingleIsoEl23_;
  TBranch *HLT_SingleIsoEl23_branch;
  bool     HLT_SingleIsoEl23_isLoaded;
  int      HLT_SingleIsoMu8_;
  TBranch *HLT_SingleIsoMu8_branch;
  bool     HLT_SingleIsoMu8_isLoaded;
  int      HLT_SingleIsoMu17_;
  TBranch *HLT_SingleIsoMu17_branch;
  bool     HLT_SingleIsoMu17_isLoaded;
  int      HLT_PFMET140_PFMHT140_IDTight_;
  TBranch *HLT_PFMET140_PFMHT140_IDTight_branch;
  bool     HLT_PFMET140_PFMHT140_IDTight_isLoaded;
  int      mc_HLT_DoubleMu_;
  TBranch *mc_HLT_DoubleMu_branch;
  bool     mc_HLT_DoubleMu_isLoaded;
  int      mc_HLT_DoubleEl_;
  TBranch *mc_HLT_DoubleEl_branch;
  bool     mc_HLT_DoubleEl_isLoaded;
  int      mc_HLT_DoubleEl_DZ_;
  TBranch *mc_HLT_DoubleEl_DZ_branch;
  bool     mc_HLT_DoubleEl_DZ_isLoaded;
  int      mc_HLT_DoubleEl_DZ_2_;
  TBranch *mc_HLT_DoubleEl_DZ_2_branch;
  bool     mc_HLT_DoubleEl_DZ_2_isLoaded;
  int      mc_HLT_MuEG_;
  TBranch *mc_HLT_MuEG_branch;
  bool     mc_HLT_MuEG_isLoaded;
  int      mc_HLT_SingleEl8_;
  TBranch *mc_HLT_SingleEl8_branch;
  bool     mc_HLT_SingleEl8_isLoaded;
  int      mc_HLT_SingleEl17_;
  TBranch *mc_HLT_SingleEl17_branch;
  bool     mc_HLT_SingleEl17_isLoaded;
  int      mc_HLT_SingleIsoEl8_;
  TBranch *mc_HLT_SingleIsoEl8_branch;
  bool     mc_HLT_SingleIsoEl8_isLoaded;
  int      mc_HLT_SingleIsoEl12_;
  TBranch *mc_HLT_SingleIsoEl12_branch;
  bool     mc_HLT_SingleIsoEl12_isLoaded;
  int      mc_HLT_SingleIsoEl17_;
  TBranch *mc_HLT_SingleIsoEl17_branch;
  bool     mc_HLT_SingleIsoEl17_isLoaded;
  int      mc_HLT_SingleIsoEl23_;
  TBranch *mc_HLT_SingleIsoEl23_branch;
  bool     mc_HLT_SingleIsoEl23_isLoaded;
  int      mc_HLT_SingleIsoMu8_;
  TBranch *mc_HLT_SingleIsoMu8_branch;
  bool     mc_HLT_SingleIsoMu8_isLoaded;
  int      mc_HLT_SingleIsoMu17_;
  TBranch *mc_HLT_SingleIsoMu17_branch;
  bool     mc_HLT_SingleIsoMu17_isLoaded;
  int      mc_HLT_PFMET140_PFMHT140_IDTight_;
  TBranch *mc_HLT_PFMET140_PFMHT140_IDTight_branch;
  bool     mc_HLT_PFMET140_PFMHT140_IDTight_isLoaded;
  int      pass_duplicate_ee_em_mm_;
  TBranch *pass_duplicate_ee_em_mm_branch;
  bool     pass_duplicate_ee_em_mm_isLoaded;
  int      pass_duplicate_mm_em_ee_;
  TBranch *pass_duplicate_mm_em_ee_branch;
  bool     pass_duplicate_mm_em_ee_isLoaded;
  int      is2016_;
  TBranch *is2016_branch;
  bool     is2016_isLoaded;
  int      is2017_;
  TBranch *is2017_branch;
  bool     is2017_isLoaded;
  int      is2018_;
  TBranch *is2018_branch;
  bool     is2018_isLoaded;
  int      HLT_MuEG_2016_;
  TBranch *HLT_MuEG_2016_branch;
  bool     HLT_MuEG_2016_isLoaded;
  int      mc_HLT_MuEG_2016_;
  TBranch *mc_HLT_MuEG_2016_branch;
  bool     mc_HLT_MuEG_2016_isLoaded;
  int      pass_duplicate_ee_em2016_mm_;
  TBranch *pass_duplicate_ee_em2016_mm_branch;
  bool     pass_duplicate_ee_em2016_mm_isLoaded;
  int      pass_duplicate_mm_em2016_ee_;
  TBranch *pass_duplicate_mm_em2016_ee_branch;
  bool     pass_duplicate_mm_em2016_ee_isLoaded;
  int      passTrigger_;
  TBranch *passTrigger_branch;
  bool     passTrigger_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *lep_p4_;
  TBranch *lep_p4_branch;
  bool     lep_p4_isLoaded;
  vector<float> *lep_pt_;
  TBranch *lep_pt_branch;
  bool     lep_pt_isLoaded;
  vector<float> *lep_eta_;
  TBranch *lep_eta_branch;
  bool     lep_eta_isLoaded;
  vector<float> *lep_phi_;
  TBranch *lep_phi_branch;
  bool     lep_phi_isLoaded;
  vector<float> *lep_coneCorrPt_;
  TBranch *lep_coneCorrPt_branch;
  bool     lep_coneCorrPt_isLoaded;
  vector<float> *lep_ip3d_;
  TBranch *lep_ip3d_branch;
  bool     lep_ip3d_isLoaded;
  vector<float> *lep_ip3derr_;
  TBranch *lep_ip3derr_branch;
  bool     lep_ip3derr_isLoaded;
  vector<int> *lep_isTriggerSafe_v1_;
  TBranch *lep_isTriggerSafe_v1_branch;
  bool     lep_isTriggerSafe_v1_isLoaded;
  vector<int> *lep_lostHits_;
  TBranch *lep_lostHits_branch;
  bool     lep_lostHits_isLoaded;
  vector<int> *lep_convVeto_;
  TBranch *lep_convVeto_branch;
  bool     lep_convVeto_isLoaded;
  vector<int> *lep_exp_innerlayers_;
  TBranch *lep_exp_innerlayers_branch;
  bool     lep_exp_innerlayers_isLoaded;
  vector<int> *lep_motherIdSS_;
  TBranch *lep_motherIdSS_branch;
  bool     lep_motherIdSS_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_3l_fo_;
  TBranch *lep_pass_VVV_cutbased_3l_fo_branch;
  bool     lep_pass_VVV_cutbased_3l_fo_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_3l_tight_;
  TBranch *lep_pass_VVV_cutbased_3l_tight_branch;
  bool     lep_pass_VVV_cutbased_3l_tight_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_fo_;
  TBranch *lep_pass_VVV_cutbased_fo_branch;
  bool     lep_pass_VVV_cutbased_fo_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_tight_;
  TBranch *lep_pass_VVV_cutbased_tight_branch;
  bool     lep_pass_VVV_cutbased_tight_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_veto_;
  TBranch *lep_pass_VVV_cutbased_veto_branch;
  bool     lep_pass_VVV_cutbased_veto_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_fo_noiso_;
  TBranch *lep_pass_VVV_cutbased_fo_noiso_branch;
  bool     lep_pass_VVV_cutbased_fo_noiso_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_tight_noiso_;
  TBranch *lep_pass_VVV_cutbased_tight_noiso_branch;
  bool     lep_pass_VVV_cutbased_tight_noiso_isLoaded;
  vector<int> *lep_pass_VVV_cutbased_veto_noiso_;
  TBranch *lep_pass_VVV_cutbased_veto_noiso_branch;
  bool     lep_pass_VVV_cutbased_veto_noiso_isLoaded;
  vector<int> *lep_pass_VVV_3l_fo_;
  TBranch *lep_pass_VVV_3l_fo_branch;
  bool     lep_pass_VVV_3l_fo_isLoaded;
  vector<int> *lep_pass_VVV_3l_tight_;
  TBranch *lep_pass_VVV_3l_tight_branch;
  bool     lep_pass_VVV_3l_tight_isLoaded;
  vector<int> *lep_pass_VVV_fo_;
  TBranch *lep_pass_VVV_fo_branch;
  bool     lep_pass_VVV_fo_isLoaded;
  vector<int> *lep_pass_VVV_tight_;
  TBranch *lep_pass_VVV_tight_branch;
  bool     lep_pass_VVV_tight_isLoaded;
  vector<int> *lep_pass_VVV_veto_;
  TBranch *lep_pass_VVV_veto_branch;
  bool     lep_pass_VVV_veto_isLoaded;
  vector<int> *lep_pass_VVV_fo_noiso_;
  TBranch *lep_pass_VVV_fo_noiso_branch;
  bool     lep_pass_VVV_fo_noiso_isLoaded;
  vector<int> *lep_pass_VVV_tight_noiso_;
  TBranch *lep_pass_VVV_tight_noiso_branch;
  bool     lep_pass_VVV_tight_noiso_isLoaded;
  vector<int> *lep_pass_VVV_veto_noiso_;
  TBranch *lep_pass_VVV_veto_noiso_branch;
  bool     lep_pass_VVV_veto_noiso_isLoaded;
  vector<int> *lep_pass_POG_veto_;
  TBranch *lep_pass_POG_veto_branch;
  bool     lep_pass_POG_veto_isLoaded;
  vector<int> *lep_pass_POG_loose_;
  TBranch *lep_pass_POG_loose_branch;
  bool     lep_pass_POG_loose_isLoaded;
  vector<int> *lep_pass_POG_medium_;
  TBranch *lep_pass_POG_medium_branch;
  bool     lep_pass_POG_medium_isLoaded;
  vector<int> *lep_pass_POG_tight_;
  TBranch *lep_pass_POG_tight_branch;
  bool     lep_pass_POG_tight_isLoaded;
  vector<int> *lep_pdgId_;
  TBranch *lep_pdgId_branch;
  bool     lep_pdgId_isLoaded;
  vector<float> *lep_dxy_;
  TBranch *lep_dxy_branch;
  bool     lep_dxy_isLoaded;
  vector<float> *lep_dz_;
  TBranch *lep_dz_branch;
  bool     lep_dz_isLoaded;
  vector<float> *lep_pterr_;
  TBranch *lep_pterr_branch;
  bool     lep_pterr_isLoaded;
  vector<float> *lep_relIso04DB_;
  TBranch *lep_relIso04DB_branch;
  bool     lep_relIso04DB_isLoaded;
  vector<float> *lep_relIso03EA_;
  TBranch *lep_relIso03EA_branch;
  bool     lep_relIso03EA_isLoaded;
  vector<float> *lep_relIso03EALep_;
  TBranch *lep_relIso03EALep_branch;
  bool     lep_relIso03EALep_isLoaded;
  vector<float> *lep_relIso03EAv2_;
  TBranch *lep_relIso03EAv2_branch;
  bool     lep_relIso03EAv2_isLoaded;
  vector<float> *lep_relIso04EAv2_;
  TBranch *lep_relIso04EAv2_branch;
  bool     lep_relIso04EAv2_isLoaded;
  vector<float> *lep_relIso03EAv2Lep_;
  TBranch *lep_relIso03EAv2Lep_branch;
  bool     lep_relIso03EAv2Lep_isLoaded;
  vector<int> *lep_tightCharge_;
  TBranch *lep_tightCharge_branch;
  bool     lep_tightCharge_isLoaded;
  vector<float> *lep_trk_pt_;
  TBranch *lep_trk_pt_branch;
  bool     lep_trk_pt_isLoaded;
  vector<int> *lep_charge_;
  TBranch *lep_charge_branch;
  bool     lep_charge_isLoaded;
  vector<float> *lep_etaSC_;
  TBranch *lep_etaSC_branch;
  bool     lep_etaSC_isLoaded;
  vector<float> *lep_MVA_;
  TBranch *lep_MVA_branch;
  bool     lep_MVA_isLoaded;
  vector<int> *lep_isLoosePOG_;
  TBranch *lep_isLoosePOG_branch;
  bool     lep_isLoosePOG_isLoaded;
  vector<int> *lep_isMediumPOG_;
  TBranch *lep_isMediumPOG_branch;
  bool     lep_isMediumPOG_isLoaded;
  vector<int> *lep_isTightPOG_;
  TBranch *lep_isTightPOG_branch;
  bool     lep_isTightPOG_isLoaded;
  vector<int> *lep_isFromW_;
  TBranch *lep_isFromW_branch;
  bool     lep_isFromW_isLoaded;
  vector<int> *lep_isFromZ_;
  TBranch *lep_isFromZ_branch;
  bool     lep_isFromZ_isLoaded;
  vector<int> *lep_isFromB_;
  TBranch *lep_isFromB_branch;
  bool     lep_isFromB_isLoaded;
  vector<int> *lep_isFromC_;
  TBranch *lep_isFromC_branch;
  bool     lep_isFromC_isLoaded;
  vector<int> *lep_isFromL_;
  TBranch *lep_isFromL_branch;
  bool     lep_isFromL_isLoaded;
  vector<int> *lep_isFromLF_;
  TBranch *lep_isFromLF_branch;
  bool     lep_isFromLF_isLoaded;
  vector<int> *lep_genPart_index_;
  TBranch *lep_genPart_index_branch;
  bool     lep_genPart_index_isLoaded;
  vector<float> *lep_r9_;
  TBranch *lep_r9_branch;
  bool     lep_r9_isLoaded;
  vector<int> *lep_nlayers_;
  TBranch *lep_nlayers_branch;
  bool     lep_nlayers_isLoaded;
  float    el_pt_;
  TBranch *el_pt_branch;
  bool     el_pt_isLoaded;
  float    el_eta_;
  TBranch *el_eta_branch;
  bool     el_eta_isLoaded;
  float    el_phi_;
  TBranch *el_phi_branch;
  bool     el_phi_isLoaded;
  float    el_relIso03EA_;
  TBranch *el_relIso03EA_branch;
  bool     el_relIso03EA_isLoaded;
  float    el_relIso03EALep_;
  TBranch *el_relIso03EALep_branch;
  bool     el_relIso03EALep_isLoaded;
  float    el_ip3d_;
  TBranch *el_ip3d_branch;
  bool     el_ip3d_isLoaded;
  float    mu_pt_;
  TBranch *mu_pt_branch;
  bool     mu_pt_isLoaded;
  float    mu_eta_;
  TBranch *mu_eta_branch;
  bool     mu_eta_isLoaded;
  float    mu_phi_;
  TBranch *mu_phi_branch;
  bool     mu_phi_isLoaded;
  float    mu_relIso04DB_;
  TBranch *mu_relIso04DB_branch;
  bool     mu_relIso04DB_isLoaded;
  float    mu_relIso03EA_;
  TBranch *mu_relIso03EA_branch;
  bool     mu_relIso03EA_isLoaded;
  float    mu_relIso03EALep_;
  TBranch *mu_relIso03EALep_branch;
  bool     mu_relIso03EALep_isLoaded;
  float    mu_ip3d_;
  TBranch *mu_ip3d_branch;
  bool     mu_ip3d_isLoaded;
  float    lbnt_pt_;
  TBranch *lbnt_pt_branch;
  bool     lbnt_pt_isLoaded;
  float    lbnt_coneCorrPt_;
  TBranch *lbnt_coneCorrPt_branch;
  bool     lbnt_coneCorrPt_isLoaded;
  float    lbnt_abseta_;
  TBranch *lbnt_abseta_branch;
  bool     lbnt_abseta_isLoaded;
  float    lbnt_pdgId_;
  TBranch *lbnt_pdgId_branch;
  bool     lbnt_pdgId_isLoaded;
  float    lbnt_el_pt_;
  TBranch *lbnt_el_pt_branch;
  bool     lbnt_el_pt_isLoaded;
  float    lbnt_el_coneCorrPt_;
  TBranch *lbnt_el_coneCorrPt_branch;
  bool     lbnt_el_coneCorrPt_isLoaded;
  float    lbnt_el_abseta_;
  TBranch *lbnt_el_abseta_branch;
  bool     lbnt_el_abseta_isLoaded;
  float    lbnt_mu_pt_;
  TBranch *lbnt_mu_pt_branch;
  bool     lbnt_mu_pt_isLoaded;
  float    lbnt_mu_coneCorrPt_;
  TBranch *lbnt_mu_coneCorrPt_branch;
  bool     lbnt_mu_coneCorrPt_isLoaded;
  float    lbnt_mu_abseta_;
  TBranch *lbnt_mu_abseta_branch;
  bool     lbnt_mu_abseta_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_p4_;
  TBranch *jets_p4_branch;
  bool     jets_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_up_p4_;
  TBranch *jets_up_p4_branch;
  bool     jets_up_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_dn_p4_;
  TBranch *jets_dn_p4_branch;
  bool     jets_dn_p4_isLoaded;
  vector<float> *jets_btag_score_;
  TBranch *jets_btag_score_branch;
  bool     jets_btag_score_isLoaded;
  vector<float> *jets_up_btag_score_;
  TBranch *jets_up_btag_score_branch;
  bool     jets_up_btag_score_isLoaded;
  vector<float> *jets_dn_btag_score_;
  TBranch *jets_dn_btag_score_branch;
  bool     jets_dn_btag_score_isLoaded;
  vector<float> *jets_jer_btag_score_;
  TBranch *jets_jer_btag_score_branch;
  bool     jets_jer_btag_score_isLoaded;
  vector<float> *jets_jerup_btag_score_;
  TBranch *jets_jerup_btag_score_branch;
  bool     jets_jerup_btag_score_isLoaded;
  vector<float> *jets_jerdn_btag_score_;
  TBranch *jets_jerdn_btag_score_branch;
  bool     jets_jerdn_btag_score_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_jer_p4_;
  TBranch *jets_jer_p4_branch;
  bool     jets_jer_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_jerup_p4_;
  TBranch *jets_jerup_p4_branch;
  bool     jets_jerup_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_jerdn_p4_;
  TBranch *jets_jerdn_p4_branch;
  bool     jets_jerdn_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets30_p4_;
  TBranch *jets30_p4_branch;
  bool     jets30_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets30_up_p4_;
  TBranch *jets30_up_p4_branch;
  bool     jets30_up_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets30_dn_p4_;
  TBranch *jets30_dn_p4_branch;
  bool     jets30_dn_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets30_jer_p4_;
  TBranch *jets30_jer_p4_branch;
  bool     jets30_jer_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets30_jerup_p4_;
  TBranch *jets30_jerup_p4_branch;
  bool     jets30_jerup_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets30_jerdn_p4_;
  TBranch *jets30_jerdn_p4_branch;
  bool     jets30_jerdn_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ak8jets_p4_;
  TBranch *ak8jets_p4_branch;
  bool     ak8jets_p4_isLoaded;
  vector<float> *ak8jets_softdropMass_;
  TBranch *ak8jets_softdropMass_branch;
  bool     ak8jets_softdropMass_isLoaded;
  vector<float> *ak8jets_prunedMass_;
  TBranch *ak8jets_prunedMass_branch;
  bool     ak8jets_prunedMass_isLoaded;
  vector<float> *ak8jets_trimmedMass_;
  TBranch *ak8jets_trimmedMass_branch;
  bool     ak8jets_trimmedMass_isLoaded;
  vector<float> *ak8jets_mass_;
  TBranch *ak8jets_mass_branch;
  bool     ak8jets_mass_isLoaded;
  vector<float> *ak8jets_nJettinessTau1_;
  TBranch *ak8jets_nJettinessTau1_branch;
  bool     ak8jets_nJettinessTau1_isLoaded;
  vector<float> *ak8jets_nJettinessTau2_;
  TBranch *ak8jets_nJettinessTau2_branch;
  bool     ak8jets_nJettinessTau2_isLoaded;
  vector<float> *ak8jets_softdropPuppiSubjet1_;
  TBranch *ak8jets_softdropPuppiSubjet1_branch;
  bool     ak8jets_softdropPuppiSubjet1_isLoaded;
  vector<float> *ak8jets_softdropPuppiSubjet2_;
  TBranch *ak8jets_softdropPuppiSubjet2_branch;
  bool     ak8jets_softdropPuppiSubjet2_isLoaded;
  vector<float> *ak8jets_puppi_softdropMass_;
  TBranch *ak8jets_puppi_softdropMass_branch;
  bool     ak8jets_puppi_softdropMass_isLoaded;
  vector<float> *ak8jets_puppi_nJettinessTau1_;
  TBranch *ak8jets_puppi_nJettinessTau1_branch;
  bool     ak8jets_puppi_nJettinessTau1_isLoaded;
  vector<float> *ak8jets_puppi_nJettinessTau2_;
  TBranch *ak8jets_puppi_nJettinessTau2_branch;
  bool     ak8jets_puppi_nJettinessTau2_isLoaded;
  vector<float> *ak8jets_puppi_eta_;
  TBranch *ak8jets_puppi_eta_branch;
  bool     ak8jets_puppi_eta_isLoaded;
  vector<float> *ak8jets_puppi_phi_;
  TBranch *ak8jets_puppi_phi_branch;
  bool     ak8jets_puppi_phi_isLoaded;
  vector<float> *ak8jets_puppi_pt_;
  TBranch *ak8jets_puppi_pt_branch;
  bool     ak8jets_puppi_pt_isLoaded;
  vector<float> *ak8jets_puppi_mass_;
  TBranch *ak8jets_puppi_mass_branch;
  bool     ak8jets_puppi_mass_isLoaded;
  vector<float> *ak8jets_deep_rawdisc_h4q_;
  TBranch *ak8jets_deep_rawdisc_h4q_branch;
  bool     ak8jets_deep_rawdisc_h4q_isLoaded;
  vector<float> *ak8jets_deep_rawdisc_hbb_;
  TBranch *ak8jets_deep_rawdisc_hbb_branch;
  bool     ak8jets_deep_rawdisc_hbb_isLoaded;
  vector<float> *ak8jets_deep_rawdisc_top_;
  TBranch *ak8jets_deep_rawdisc_top_branch;
  bool     ak8jets_deep_rawdisc_top_isLoaded;
  vector<float> *ak8jets_deep_rawdisc_qcd_;
  TBranch *ak8jets_deep_rawdisc_qcd_branch;
  bool     ak8jets_deep_rawdisc_qcd_isLoaded;
  vector<float> *ak8jets_deep_rawdisc_w_;
  TBranch *ak8jets_deep_rawdisc_w_branch;
  bool     ak8jets_deep_rawdisc_w_isLoaded;
  vector<float> *ak8jets_deep_rawdisc_z_;
  TBranch *ak8jets_deep_rawdisc_z_branch;
  bool     ak8jets_deep_rawdisc_z_isLoaded;
  vector<float> *ak8jets_deep_rawdisc_zbb_;
  TBranch *ak8jets_deep_rawdisc_zbb_branch;
  bool     ak8jets_deep_rawdisc_zbb_isLoaded;
  float    met_pt_;
  TBranch *met_pt_branch;
  bool     met_pt_isLoaded;
  float    met_phi_;
  TBranch *met_phi_branch;
  bool     met_phi_isLoaded;
  float    met_up_pt_;
  TBranch *met_up_pt_branch;
  bool     met_up_pt_isLoaded;
  float    met_up_phi_;
  TBranch *met_up_phi_branch;
  bool     met_up_phi_isLoaded;
  float    met_dn_pt_;
  TBranch *met_dn_pt_branch;
  bool     met_dn_pt_isLoaded;
  float    met_dn_phi_;
  TBranch *met_dn_phi_branch;
  bool     met_dn_phi_isLoaded;
  float    met_gen_pt_;
  TBranch *met_gen_pt_branch;
  bool     met_gen_pt_isLoaded;
  float    met_gen_phi_;
  TBranch *met_gen_phi_branch;
  bool     met_gen_phi_isLoaded;
  float    met_jer_pt_;
  TBranch *met_jer_pt_branch;
  bool     met_jer_pt_isLoaded;
  float    met_jerup_pt_;
  TBranch *met_jerup_pt_branch;
  bool     met_jerup_pt_isLoaded;
  float    met_jerdn_pt_;
  TBranch *met_jerdn_pt_branch;
  bool     met_jerdn_pt_isLoaded;
  float    met_jer_phi_;
  TBranch *met_jer_phi_branch;
  bool     met_jer_phi_isLoaded;
  float    met_jerup_phi_;
  TBranch *met_jerup_phi_branch;
  bool     met_jerup_phi_isLoaded;
  float    met_jerdn_phi_;
  TBranch *met_jerdn_phi_branch;
  bool     met_jerdn_phi_isLoaded;
  int      firstgoodvertex_;
  TBranch *firstgoodvertex_branch;
  bool     firstgoodvertex_isLoaded;
  int      nTrueInt_;
  TBranch *nTrueInt_branch;
  bool     nTrueInt_isLoaded;
  int      nVert_;
  TBranch *nVert_branch;
  bool     nVert_isLoaded;
  int      nisoTrack_mt2_cleaned_VVV_cutbased_veto_;
  TBranch *nisoTrack_mt2_cleaned_VVV_cutbased_veto_branch;
  bool     nisoTrack_mt2_cleaned_VVV_cutbased_veto_isLoaded;
  float    weight_btagsf_;
  TBranch *weight_btagsf_branch;
  bool     weight_btagsf_isLoaded;
  float    weight_btagsf_heavy_DN_;
  TBranch *weight_btagsf_heavy_DN_branch;
  bool     weight_btagsf_heavy_DN_isLoaded;
  float    weight_btagsf_heavy_UP_;
  TBranch *weight_btagsf_heavy_UP_branch;
  bool     weight_btagsf_heavy_UP_isLoaded;
  float    weight_btagsf_light_DN_;
  TBranch *weight_btagsf_light_DN_branch;
  bool     weight_btagsf_light_DN_isLoaded;
  float    weight_btagsf_light_UP_;
  TBranch *weight_btagsf_light_UP_branch;
  bool     weight_btagsf_light_UP_isLoaded;
  float    gen_ht_;
  TBranch *gen_ht_branch;
  bool     gen_ht_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *genPart_p4_;
  TBranch *genPart_p4_branch;
  bool     genPart_p4_isLoaded;
  vector<int> *genPart_motherId_;
  TBranch *genPart_motherId_branch;
  bool     genPart_motherId_isLoaded;
  vector<int> *genPart_pdgId_;
  TBranch *genPart_pdgId_branch;
  bool     genPart_pdgId_isLoaded;
  vector<int> *genPart_charge_;
  TBranch *genPart_charge_branch;
  bool     genPart_charge_isLoaded;
  vector<int> *genPart_status_;
  TBranch *genPart_status_branch;
  bool     genPart_status_isLoaded;
  int      ngenLep_;
  TBranch *ngenLep_branch;
  bool     ngenLep_isLoaded;
  int      ngenLepFromTau_;
  TBranch *ngenLepFromTau_branch;
  bool     ngenLepFromTau_isLoaded;
  int      ngenLepFromBoson_;
  TBranch *ngenLepFromBoson_branch;
  bool     ngenLepFromBoson_isLoaded;
  int      passesMETfiltersRun2_;
  TBranch *passesMETfiltersRun2_branch;
  bool     passesMETfiltersRun2_isLoaded;
  int      Flag_AllEventFilters_;
  TBranch *Flag_AllEventFilters_branch;
  bool     Flag_AllEventFilters_isLoaded;
  int      Flag_EcalDeadCellTriggerPrimitiveFilter_;
  TBranch *Flag_EcalDeadCellTriggerPrimitiveFilter_branch;
  bool     Flag_EcalDeadCellTriggerPrimitiveFilter_isLoaded;
  int      Flag_HBHEIsoNoiseFilter_;
  TBranch *Flag_HBHEIsoNoiseFilter_branch;
  bool     Flag_HBHEIsoNoiseFilter_isLoaded;
  int      Flag_HBHENoiseFilter_;
  TBranch *Flag_HBHENoiseFilter_branch;
  bool     Flag_HBHENoiseFilter_isLoaded;
  int      Flag_badChargedCandidateFilter_;
  TBranch *Flag_badChargedCandidateFilter_branch;
  bool     Flag_badChargedCandidateFilter_isLoaded;
  int      Flag_badMuonFilter_;
  TBranch *Flag_badMuonFilter_branch;
  bool     Flag_badMuonFilter_isLoaded;
  int      Flag_badMuonFilterv2_;
  TBranch *Flag_badMuonFilterv2_branch;
  bool     Flag_badMuonFilterv2_isLoaded;
  int      Flag_badChargedCandidateFilterv2_;
  TBranch *Flag_badChargedCandidateFilterv2_branch;
  bool     Flag_badChargedCandidateFilterv2_isLoaded;
  int      Flag_eeBadScFilter_;
  TBranch *Flag_eeBadScFilter_branch;
  bool     Flag_eeBadScFilter_isLoaded;
  int      Flag_ecalBadCalibFilter_;
  TBranch *Flag_ecalBadCalibFilter_branch;
  bool     Flag_ecalBadCalibFilter_isLoaded;
  int      Flag_globalTightHalo2016_;
  TBranch *Flag_globalTightHalo2016_branch;
  bool     Flag_globalTightHalo2016_isLoaded;
  int      Flag_goodVertices_;
  TBranch *Flag_goodVertices_branch;
  bool     Flag_goodVertices_isLoaded;
  int      Flag_ecalLaserCorrFilter_;
  TBranch *Flag_ecalLaserCorrFilter_branch;
  bool     Flag_ecalLaserCorrFilter_isLoaded;
  int      Flag_hcalLaserEventFilter_;
  TBranch *Flag_hcalLaserEventFilter_branch;
  bool     Flag_hcalLaserEventFilter_isLoaded;
  int      Flag_trackingFailureFilter_;
  TBranch *Flag_trackingFailureFilter_branch;
  bool     Flag_trackingFailureFilter_isLoaded;
  int      Flag_CSCTightHaloFilter_;
  TBranch *Flag_CSCTightHaloFilter_branch;
  bool     Flag_CSCTightHaloFilter_isLoaded;
  int      Flag_CSCTightHalo2015Filter_;
  TBranch *Flag_CSCTightHalo2015Filter_branch;
  bool     Flag_CSCTightHalo2015Filter_isLoaded;
  int      Flag_badMuons_;
  TBranch *Flag_badMuons_branch;
  bool     Flag_badMuons_isLoaded;
  int      Flag_duplicateMuons_;
  TBranch *Flag_duplicateMuons_branch;
  bool     Flag_duplicateMuons_isLoaded;
  int      Flag_noBadMuons_;
  TBranch *Flag_noBadMuons_branch;
  bool     Flag_noBadMuons_isLoaded;
  int      fastsimfilt_;
  TBranch *fastsimfilt_branch;
  bool     fastsimfilt_isLoaded;
  int      nVlep_;
  TBranch *nVlep_branch;
  bool     nVlep_isLoaded;
  int      nTlep_;
  TBranch *nTlep_branch;
  bool     nTlep_isLoaded;
  int      nTlepSS_;
  TBranch *nTlepSS_branch;
  bool     nTlepSS_isLoaded;
  int      nLlep_;
  TBranch *nLlep_branch;
  bool     nLlep_isLoaded;
  int      nLlep3L_;
  TBranch *nLlep3L_branch;
  bool     nLlep3L_isLoaded;
  int      nTlep3L_;
  TBranch *nTlep3L_branch;
  bool     nTlep3L_isLoaded;
  int      nSFOS_;
  TBranch *nSFOS_branch;
  bool     nSFOS_isLoaded;
  int      nSFOSinZ_;
  TBranch *nSFOSinZ_branch;
  bool     nSFOSinZ_isLoaded;
  int      nj_;
  TBranch *nj_branch;
  bool     nj_isLoaded;
  int      nj_up_;
  TBranch *nj_up_branch;
  bool     nj_up_isLoaded;
  int      nj_dn_;
  TBranch *nj_dn_branch;
  bool     nj_dn_isLoaded;
  int      nj_jer_;
  TBranch *nj_jer_branch;
  bool     nj_jer_isLoaded;
  int      nj_jerup_;
  TBranch *nj_jerup_branch;
  bool     nj_jerup_isLoaded;
  int      nj_jerdn_;
  TBranch *nj_jerdn_branch;
  bool     nj_jerdn_isLoaded;
  int      nj30_;
  TBranch *nj30_branch;
  bool     nj30_isLoaded;
  int      nj30_up_;
  TBranch *nj30_up_branch;
  bool     nj30_up_isLoaded;
  int      nj30_dn_;
  TBranch *nj30_dn_branch;
  bool     nj30_dn_isLoaded;
  int      nj30_jer_;
  TBranch *nj30_jer_branch;
  bool     nj30_jer_isLoaded;
  int      nj30_jerup_;
  TBranch *nj30_jerup_branch;
  bool     nj30_jerup_isLoaded;
  int      nj30_jerdn_;
  TBranch *nj30_jerdn_branch;
  bool     nj30_jerdn_isLoaded;
  int      nb_;
  TBranch *nb_branch;
  bool     nb_isLoaded;
  int      nb_up_;
  TBranch *nb_up_branch;
  bool     nb_up_isLoaded;
  int      nb_dn_;
  TBranch *nb_dn_branch;
  bool     nb_dn_isLoaded;
  int      nb_jer_;
  TBranch *nb_jer_branch;
  bool     nb_jer_isLoaded;
  int      nb_jerup_;
  TBranch *nb_jerup_branch;
  bool     nb_jerup_isLoaded;
  int      nb_jerdn_;
  TBranch *nb_jerdn_branch;
  bool     nb_jerdn_isLoaded;
  float    Ml0j0_;
  TBranch *Ml0j0_branch;
  bool     Ml0j0_isLoaded;
  float    Ml0j0_up_;
  TBranch *Ml0j0_up_branch;
  bool     Ml0j0_up_isLoaded;
  float    Ml0j0_dn_;
  TBranch *Ml0j0_dn_branch;
  bool     Ml0j0_dn_isLoaded;
  float    Ml0j0_jer_;
  TBranch *Ml0j0_jer_branch;
  bool     Ml0j0_jer_isLoaded;
  float    Ml0j0_jerup_;
  TBranch *Ml0j0_jerup_branch;
  bool     Ml0j0_jerup_isLoaded;
  float    Ml0j0_jerdn_;
  TBranch *Ml0j0_jerdn_branch;
  bool     Ml0j0_jerdn_isLoaded;
  float    Ml0j1_;
  TBranch *Ml0j1_branch;
  bool     Ml0j1_isLoaded;
  float    Ml0j1_up_;
  TBranch *Ml0j1_up_branch;
  bool     Ml0j1_up_isLoaded;
  float    Ml0j1_dn_;
  TBranch *Ml0j1_dn_branch;
  bool     Ml0j1_dn_isLoaded;
  float    Ml0j1_jer_;
  TBranch *Ml0j1_jer_branch;
  bool     Ml0j1_jer_isLoaded;
  float    Ml0j1_jerup_;
  TBranch *Ml0j1_jerup_branch;
  bool     Ml0j1_jerup_isLoaded;
  float    Ml0j1_jerdn_;
  TBranch *Ml0j1_jerdn_branch;
  bool     Ml0j1_jerdn_isLoaded;
  float    Ml1j0_;
  TBranch *Ml1j0_branch;
  bool     Ml1j0_isLoaded;
  float    Ml1j0_up_;
  TBranch *Ml1j0_up_branch;
  bool     Ml1j0_up_isLoaded;
  float    Ml1j0_dn_;
  TBranch *Ml1j0_dn_branch;
  bool     Ml1j0_dn_isLoaded;
  float    Ml1j0_jer_;
  TBranch *Ml1j0_jer_branch;
  bool     Ml1j0_jer_isLoaded;
  float    Ml1j0_jerup_;
  TBranch *Ml1j0_jerup_branch;
  bool     Ml1j0_jerup_isLoaded;
  float    Ml1j0_jerdn_;
  TBranch *Ml1j0_jerdn_branch;
  bool     Ml1j0_jerdn_isLoaded;
  float    Ml1j1_;
  TBranch *Ml1j1_branch;
  bool     Ml1j1_isLoaded;
  float    Ml1j1_up_;
  TBranch *Ml1j1_up_branch;
  bool     Ml1j1_up_isLoaded;
  float    Ml1j1_dn_;
  TBranch *Ml1j1_dn_branch;
  bool     Ml1j1_dn_isLoaded;
  float    Ml1j1_jer_;
  TBranch *Ml1j1_jer_branch;
  bool     Ml1j1_jer_isLoaded;
  float    Ml1j1_jerup_;
  TBranch *Ml1j1_jerup_branch;
  bool     Ml1j1_jerup_isLoaded;
  float    Ml1j1_jerdn_;
  TBranch *Ml1j1_jerdn_branch;
  bool     Ml1j1_jerdn_isLoaded;
  float    MinMlj_;
  TBranch *MinMlj_branch;
  bool     MinMlj_isLoaded;
  float    MinMlj_up_;
  TBranch *MinMlj_up_branch;
  bool     MinMlj_up_isLoaded;
  float    MinMlj_dn_;
  TBranch *MinMlj_dn_branch;
  bool     MinMlj_dn_isLoaded;
  float    MinMlj_jer_;
  TBranch *MinMlj_jer_branch;
  bool     MinMlj_jer_isLoaded;
  float    MinMlj_jerup_;
  TBranch *MinMlj_jerup_branch;
  bool     MinMlj_jerup_isLoaded;
  float    MinMlj_jerdn_;
  TBranch *MinMlj_jerdn_branch;
  bool     MinMlj_jerdn_isLoaded;
  float    SumMinMlj01_;
  TBranch *SumMinMlj01_branch;
  bool     SumMinMlj01_isLoaded;
  float    SumMinMlj01_up_;
  TBranch *SumMinMlj01_up_branch;
  bool     SumMinMlj01_up_isLoaded;
  float    SumMinMlj01_dn_;
  TBranch *SumMinMlj01_dn_branch;
  bool     SumMinMlj01_dn_isLoaded;
  float    SumMinMlj01_jer_;
  TBranch *SumMinMlj01_jer_branch;
  bool     SumMinMlj01_jer_isLoaded;
  float    SumMinMlj01_jerup_;
  TBranch *SumMinMlj01_jerup_branch;
  bool     SumMinMlj01_jerup_isLoaded;
  float    SumMinMlj01_jerdn_;
  TBranch *SumMinMlj01_jerdn_branch;
  bool     SumMinMlj01_jerdn_isLoaded;
  float    MaxMlj_;
  TBranch *MaxMlj_branch;
  bool     MaxMlj_isLoaded;
  float    MaxMlj_up_;
  TBranch *MaxMlj_up_branch;
  bool     MaxMlj_up_isLoaded;
  float    MaxMlj_dn_;
  TBranch *MaxMlj_dn_branch;
  bool     MaxMlj_dn_isLoaded;
  float    MaxMlj_jer_;
  TBranch *MaxMlj_jer_branch;
  bool     MaxMlj_jer_isLoaded;
  float    MaxMlj_jerup_;
  TBranch *MaxMlj_jerup_branch;
  bool     MaxMlj_jerup_isLoaded;
  float    MaxMlj_jerdn_;
  TBranch *MaxMlj_jerdn_branch;
  bool     MaxMlj_jerdn_isLoaded;
  float    SumMlj_;
  TBranch *SumMlj_branch;
  bool     SumMlj_isLoaded;
  float    SumMlj_up_;
  TBranch *SumMlj_up_branch;
  bool     SumMlj_up_isLoaded;
  float    SumMlj_dn_;
  TBranch *SumMlj_dn_branch;
  bool     SumMlj_dn_isLoaded;
  float    SumMlj_jer_;
  TBranch *SumMlj_jer_branch;
  bool     SumMlj_jer_isLoaded;
  float    SumMlj_jerup_;
  TBranch *SumMlj_jerup_branch;
  bool     SumMlj_jerup_isLoaded;
  float    SumMlj_jerdn_;
  TBranch *SumMlj_jerdn_branch;
  bool     SumMlj_jerdn_isLoaded;
  float    Mljmin_;
  TBranch *Mljmin_branch;
  bool     Mljmin_isLoaded;
  float    Mljmin_up_;
  TBranch *Mljmin_up_branch;
  bool     Mljmin_up_isLoaded;
  float    Mljmin_dn_;
  TBranch *Mljmin_dn_branch;
  bool     Mljmin_dn_isLoaded;
  float    Mljmin_jer_;
  TBranch *Mljmin_jer_branch;
  bool     Mljmin_jer_isLoaded;
  float    Mljmin_jerup_;
  TBranch *Mljmin_jerup_branch;
  bool     Mljmin_jerup_isLoaded;
  float    Mljmin_jerdn_;
  TBranch *Mljmin_jerdn_branch;
  bool     Mljmin_jerdn_isLoaded;
  float    Mljmax_;
  TBranch *Mljmax_branch;
  bool     Mljmax_isLoaded;
  float    Mljmax_up_;
  TBranch *Mljmax_up_branch;
  bool     Mljmax_up_isLoaded;
  float    Mljmax_dn_;
  TBranch *Mljmax_dn_branch;
  bool     Mljmax_dn_isLoaded;
  float    Mljmax_jer_;
  TBranch *Mljmax_jer_branch;
  bool     Mljmax_jer_isLoaded;
  float    Mljmax_jerup_;
  TBranch *Mljmax_jerup_branch;
  bool     Mljmax_jerup_isLoaded;
  float    Mljmax_jerdn_;
  TBranch *Mljmax_jerdn_branch;
  bool     Mljmax_jerdn_isLoaded;
  float    DRljmin_;
  TBranch *DRljmin_branch;
  bool     DRljmin_isLoaded;
  float    DRljmin_up_;
  TBranch *DRljmin_up_branch;
  bool     DRljmin_up_isLoaded;
  float    DRljmin_dn_;
  TBranch *DRljmin_dn_branch;
  bool     DRljmin_dn_isLoaded;
  float    DRljmin_jer_;
  TBranch *DRljmin_jer_branch;
  bool     DRljmin_jer_isLoaded;
  float    DRljmin_jerup_;
  TBranch *DRljmin_jerup_branch;
  bool     DRljmin_jerup_isLoaded;
  float    DRljmin_jerdn_;
  TBranch *DRljmin_jerdn_branch;
  bool     DRljmin_jerdn_isLoaded;
  float    DRljmax_;
  TBranch *DRljmax_branch;
  bool     DRljmax_isLoaded;
  float    DRljmax_up_;
  TBranch *DRljmax_up_branch;
  bool     DRljmax_up_isLoaded;
  float    DRljmax_dn_;
  TBranch *DRljmax_dn_branch;
  bool     DRljmax_dn_isLoaded;
  float    DRljmax_jer_;
  TBranch *DRljmax_jer_branch;
  bool     DRljmax_jer_isLoaded;
  float    DRljmax_jerup_;
  TBranch *DRljmax_jerup_branch;
  bool     DRljmax_jerup_isLoaded;
  float    DRljmax_jerdn_;
  TBranch *DRljmax_jerdn_branch;
  bool     DRljmax_jerdn_isLoaded;
  float    Mljmin3L_;
  TBranch *Mljmin3L_branch;
  bool     Mljmin3L_isLoaded;
  float    Mljmin3L_up_;
  TBranch *Mljmin3L_up_branch;
  bool     Mljmin3L_up_isLoaded;
  float    Mljmin3L_dn_;
  TBranch *Mljmin3L_dn_branch;
  bool     Mljmin3L_dn_isLoaded;
  float    Mljmin3L_jer_;
  TBranch *Mljmin3L_jer_branch;
  bool     Mljmin3L_jer_isLoaded;
  float    Mljmin3L_jerup_;
  TBranch *Mljmin3L_jerup_branch;
  bool     Mljmin3L_jerup_isLoaded;
  float    Mljmin3L_jerdn_;
  TBranch *Mljmin3L_jerdn_branch;
  bool     Mljmin3L_jerdn_isLoaded;
  float    Mljmax3L_;
  TBranch *Mljmax3L_branch;
  bool     Mljmax3L_isLoaded;
  float    Mljmax3L_up_;
  TBranch *Mljmax3L_up_branch;
  bool     Mljmax3L_up_isLoaded;
  float    Mljmax3L_dn_;
  TBranch *Mljmax3L_dn_branch;
  bool     Mljmax3L_dn_isLoaded;
  float    Mljmax3L_jer_;
  TBranch *Mljmax3L_jer_branch;
  bool     Mljmax3L_jer_isLoaded;
  float    Mljmax3L_jerup_;
  TBranch *Mljmax3L_jerup_branch;
  bool     Mljmax3L_jerup_isLoaded;
  float    Mljmax3L_jerdn_;
  TBranch *Mljmax3L_jerdn_branch;
  bool     Mljmax3L_jerdn_isLoaded;
  float    DRljmin3L_;
  TBranch *DRljmin3L_branch;
  bool     DRljmin3L_isLoaded;
  float    DRljmin3L_up_;
  TBranch *DRljmin3L_up_branch;
  bool     DRljmin3L_up_isLoaded;
  float    DRljmin3L_dn_;
  TBranch *DRljmin3L_dn_branch;
  bool     DRljmin3L_dn_isLoaded;
  float    DRljmin3L_jer_;
  TBranch *DRljmin3L_jer_branch;
  bool     DRljmin3L_jer_isLoaded;
  float    DRljmin3L_jerup_;
  TBranch *DRljmin3L_jerup_branch;
  bool     DRljmin3L_jerup_isLoaded;
  float    DRljmin3L_jerdn_;
  TBranch *DRljmin3L_jerdn_branch;
  bool     DRljmin3L_jerdn_isLoaded;
  float    DRljmax3L_;
  TBranch *DRljmax3L_branch;
  bool     DRljmax3L_isLoaded;
  float    DRljmax3L_up_;
  TBranch *DRljmax3L_up_branch;
  bool     DRljmax3L_up_isLoaded;
  float    DRljmax3L_dn_;
  TBranch *DRljmax3L_dn_branch;
  bool     DRljmax3L_dn_isLoaded;
  float    DRljmax3L_jer_;
  TBranch *DRljmax3L_jer_branch;
  bool     DRljmax3L_jer_isLoaded;
  float    DRljmax3L_jerup_;
  TBranch *DRljmax3L_jerup_branch;
  bool     DRljmax3L_jerup_isLoaded;
  float    DRljmax3L_jerdn_;
  TBranch *DRljmax3L_jerdn_branch;
  bool     DRljmax3L_jerdn_isLoaded;
  float    Ml0jj_;
  TBranch *Ml0jj_branch;
  bool     Ml0jj_isLoaded;
  float    Ml0jj_up_;
  TBranch *Ml0jj_up_branch;
  bool     Ml0jj_up_isLoaded;
  float    Ml0jj_dn_;
  TBranch *Ml0jj_dn_branch;
  bool     Ml0jj_dn_isLoaded;
  float    Ml0jj_jer_;
  TBranch *Ml0jj_jer_branch;
  bool     Ml0jj_jer_isLoaded;
  float    Ml0jj_jerup_;
  TBranch *Ml0jj_jerup_branch;
  bool     Ml0jj_jerup_isLoaded;
  float    Ml0jj_jerdn_;
  TBranch *Ml0jj_jerdn_branch;
  bool     Ml0jj_jerdn_isLoaded;
  float    Ml1jj_;
  TBranch *Ml1jj_branch;
  bool     Ml1jj_isLoaded;
  float    Ml1jj_up_;
  TBranch *Ml1jj_up_branch;
  bool     Ml1jj_up_isLoaded;
  float    Ml1jj_dn_;
  TBranch *Ml1jj_dn_branch;
  bool     Ml1jj_dn_isLoaded;
  float    Ml1jj_jer_;
  TBranch *Ml1jj_jer_branch;
  bool     Ml1jj_jer_isLoaded;
  float    Ml1jj_jerup_;
  TBranch *Ml1jj_jerup_branch;
  bool     Ml1jj_jerup_isLoaded;
  float    Ml1jj_jerdn_;
  TBranch *Ml1jj_jerdn_branch;
  bool     Ml1jj_jerdn_isLoaded;
  float    MinMljj_;
  TBranch *MinMljj_branch;
  bool     MinMljj_isLoaded;
  float    MinMljj_up_;
  TBranch *MinMljj_up_branch;
  bool     MinMljj_up_isLoaded;
  float    MinMljj_dn_;
  TBranch *MinMljj_dn_branch;
  bool     MinMljj_dn_isLoaded;
  float    MinMljj_jer_;
  TBranch *MinMljj_jer_branch;
  bool     MinMljj_jer_isLoaded;
  float    MinMljj_jerup_;
  TBranch *MinMljj_jerup_branch;
  bool     MinMljj_jerup_isLoaded;
  float    MinMljj_jerdn_;
  TBranch *MinMljj_jerdn_branch;
  bool     MinMljj_jerdn_isLoaded;
  float    MaxMljj_;
  TBranch *MaxMljj_branch;
  bool     MaxMljj_isLoaded;
  float    MaxMljj_up_;
  TBranch *MaxMljj_up_branch;
  bool     MaxMljj_up_isLoaded;
  float    MaxMljj_dn_;
  TBranch *MaxMljj_dn_branch;
  bool     MaxMljj_dn_isLoaded;
  float    MaxMljj_jer_;
  TBranch *MaxMljj_jer_branch;
  bool     MaxMljj_jer_isLoaded;
  float    MaxMljj_jerup_;
  TBranch *MaxMljj_jerup_branch;
  bool     MaxMljj_jerup_isLoaded;
  float    MaxMljj_jerdn_;
  TBranch *MaxMljj_jerdn_branch;
  bool     MaxMljj_jerdn_isLoaded;
  float    SumMljj_;
  TBranch *SumMljj_branch;
  bool     SumMljj_isLoaded;
  float    SumMljj_up_;
  TBranch *SumMljj_up_branch;
  bool     SumMljj_up_isLoaded;
  float    SumMljj_dn_;
  TBranch *SumMljj_dn_branch;
  bool     SumMljj_dn_isLoaded;
  float    SumMljj_jer_;
  TBranch *SumMljj_jer_branch;
  bool     SumMljj_jer_isLoaded;
  float    SumMljj_jerup_;
  TBranch *SumMljj_jerup_branch;
  bool     SumMljj_jerup_isLoaded;
  float    SumMljj_jerdn_;
  TBranch *SumMljj_jerdn_branch;
  bool     SumMljj_jerdn_isLoaded;
  float    Mjj_;
  TBranch *Mjj_branch;
  bool     Mjj_isLoaded;
  float    Mjj_up_;
  TBranch *Mjj_up_branch;
  bool     Mjj_up_isLoaded;
  float    Mjj_dn_;
  TBranch *Mjj_dn_branch;
  bool     Mjj_dn_isLoaded;
  float    Mjj_jer_;
  TBranch *Mjj_jer_branch;
  bool     Mjj_jer_isLoaded;
  float    Mjj_jerup_;
  TBranch *Mjj_jerup_branch;
  bool     Mjj_jerup_isLoaded;
  float    Mjj_jerdn_;
  TBranch *Mjj_jerdn_branch;
  bool     Mjj_jerdn_isLoaded;
  float    DRjj_;
  TBranch *DRjj_branch;
  bool     DRjj_isLoaded;
  float    DRjj_up_;
  TBranch *DRjj_up_branch;
  bool     DRjj_up_isLoaded;
  float    DRjj_dn_;
  TBranch *DRjj_dn_branch;
  bool     DRjj_dn_isLoaded;
  float    DRjj_jer_;
  TBranch *DRjj_jer_branch;
  bool     DRjj_jer_isLoaded;
  float    DRjj_jerup_;
  TBranch *DRjj_jerup_branch;
  bool     DRjj_jerup_isLoaded;
  float    DRjj_jerdn_;
  TBranch *DRjj_jerdn_branch;
  bool     DRjj_jerdn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet0_wtag_p4_;
  TBranch *jet0_wtag_p4_branch;
  bool     jet0_wtag_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet0_wtag_p4_up_;
  TBranch *jet0_wtag_p4_up_branch;
  bool     jet0_wtag_p4_up_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet0_wtag_p4_dn_;
  TBranch *jet0_wtag_p4_dn_branch;
  bool     jet0_wtag_p4_dn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet0_wtag_p4_jer_;
  TBranch *jet0_wtag_p4_jer_branch;
  bool     jet0_wtag_p4_jer_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet0_wtag_p4_jerup_;
  TBranch *jet0_wtag_p4_jerup_branch;
  bool     jet0_wtag_p4_jerup_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet0_wtag_p4_jerdn_;
  TBranch *jet0_wtag_p4_jerdn_branch;
  bool     jet0_wtag_p4_jerdn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet1_wtag_p4_;
  TBranch *jet1_wtag_p4_branch;
  bool     jet1_wtag_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet1_wtag_p4_up_;
  TBranch *jet1_wtag_p4_up_branch;
  bool     jet1_wtag_p4_up_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet1_wtag_p4_dn_;
  TBranch *jet1_wtag_p4_dn_branch;
  bool     jet1_wtag_p4_dn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet1_wtag_p4_jer_;
  TBranch *jet1_wtag_p4_jer_branch;
  bool     jet1_wtag_p4_jer_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet1_wtag_p4_jerup_;
  TBranch *jet1_wtag_p4_jerup_branch;
  bool     jet1_wtag_p4_jerup_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet1_wtag_p4_jerdn_;
  TBranch *jet1_wtag_p4_jerdn_branch;
  bool     jet1_wtag_p4_jerdn_isLoaded;
  float    MjjDR1_;
  TBranch *MjjDR1_branch;
  bool     MjjDR1_isLoaded;
  float    MjjDR1_up_;
  TBranch *MjjDR1_up_branch;
  bool     MjjDR1_up_isLoaded;
  float    MjjDR1_dn_;
  TBranch *MjjDR1_dn_branch;
  bool     MjjDR1_dn_isLoaded;
  float    MjjDR1_jer_;
  TBranch *MjjDR1_jer_branch;
  bool     MjjDR1_jer_isLoaded;
  float    MjjDR1_jerup_;
  TBranch *MjjDR1_jerup_branch;
  bool     MjjDR1_jerup_isLoaded;
  float    MjjDR1_jerdn_;
  TBranch *MjjDR1_jerdn_branch;
  bool     MjjDR1_jerdn_isLoaded;
  float    DRjjDR1_;
  TBranch *DRjjDR1_branch;
  bool     DRjjDR1_isLoaded;
  float    DRjjDR1_up_;
  TBranch *DRjjDR1_up_branch;
  bool     DRjjDR1_up_isLoaded;
  float    DRjjDR1_dn_;
  TBranch *DRjjDR1_dn_branch;
  bool     DRjjDR1_dn_isLoaded;
  float    DRjjDR1_jer_;
  TBranch *DRjjDR1_jer_branch;
  bool     DRjjDR1_jer_isLoaded;
  float    DRjjDR1_jerup_;
  TBranch *DRjjDR1_jerup_branch;
  bool     DRjjDR1_jerup_isLoaded;
  float    DRjjDR1_jerdn_;
  TBranch *DRjjDR1_jerdn_branch;
  bool     DRjjDR1_jerdn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet0_wtag_p4_DR1_;
  TBranch *jet0_wtag_p4_DR1_branch;
  bool     jet0_wtag_p4_DR1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet0_wtag_p4_DR1_up_;
  TBranch *jet0_wtag_p4_DR1_up_branch;
  bool     jet0_wtag_p4_DR1_up_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet0_wtag_p4_DR1_dn_;
  TBranch *jet0_wtag_p4_DR1_dn_branch;
  bool     jet0_wtag_p4_DR1_dn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet0_wtag_p4_DR1_jer_;
  TBranch *jet0_wtag_p4_DR1_jer_branch;
  bool     jet0_wtag_p4_DR1_jer_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet0_wtag_p4_DR1_jerup_;
  TBranch *jet0_wtag_p4_DR1_jerup_branch;
  bool     jet0_wtag_p4_DR1_jerup_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet0_wtag_p4_DR1_jerdn_;
  TBranch *jet0_wtag_p4_DR1_jerdn_branch;
  bool     jet0_wtag_p4_DR1_jerdn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet1_wtag_p4_DR1_;
  TBranch *jet1_wtag_p4_DR1_branch;
  bool     jet1_wtag_p4_DR1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet1_wtag_p4_DR1_up_;
  TBranch *jet1_wtag_p4_DR1_up_branch;
  bool     jet1_wtag_p4_DR1_up_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet1_wtag_p4_DR1_dn_;
  TBranch *jet1_wtag_p4_DR1_dn_branch;
  bool     jet1_wtag_p4_DR1_dn_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet1_wtag_p4_DR1_jer_;
  TBranch *jet1_wtag_p4_DR1_jer_branch;
  bool     jet1_wtag_p4_DR1_jer_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet1_wtag_p4_DR1_jerup_;
  TBranch *jet1_wtag_p4_DR1_jerup_branch;
  bool     jet1_wtag_p4_DR1_jerup_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *jet1_wtag_p4_DR1_jerdn_;
  TBranch *jet1_wtag_p4_DR1_jerdn_branch;
  bool     jet1_wtag_p4_DR1_jerdn_isLoaded;
  float    MjjVBF_;
  TBranch *MjjVBF_branch;
  bool     MjjVBF_isLoaded;
  float    MjjVBF_up_;
  TBranch *MjjVBF_up_branch;
  bool     MjjVBF_up_isLoaded;
  float    MjjVBF_dn_;
  TBranch *MjjVBF_dn_branch;
  bool     MjjVBF_dn_isLoaded;
  float    MjjVBF_jer_;
  TBranch *MjjVBF_jer_branch;
  bool     MjjVBF_jer_isLoaded;
  float    MjjVBF_jerup_;
  TBranch *MjjVBF_jerup_branch;
  bool     MjjVBF_jerup_isLoaded;
  float    MjjVBF_jerdn_;
  TBranch *MjjVBF_jerdn_branch;
  bool     MjjVBF_jerdn_isLoaded;
  float    DetajjVBF_;
  TBranch *DetajjVBF_branch;
  bool     DetajjVBF_isLoaded;
  float    DetajjVBF_up_;
  TBranch *DetajjVBF_up_branch;
  bool     DetajjVBF_up_isLoaded;
  float    DetajjVBF_dn_;
  TBranch *DetajjVBF_dn_branch;
  bool     DetajjVBF_dn_isLoaded;
  float    DetajjVBF_jer_;
  TBranch *DetajjVBF_jer_branch;
  bool     DetajjVBF_jer_isLoaded;
  float    DetajjVBF_jerup_;
  TBranch *DetajjVBF_jerup_branch;
  bool     DetajjVBF_jerup_isLoaded;
  float    DetajjVBF_jerdn_;
  TBranch *DetajjVBF_jerdn_branch;
  bool     DetajjVBF_jerdn_isLoaded;
  float    MjjL_;
  TBranch *MjjL_branch;
  bool     MjjL_isLoaded;
  float    MjjL_up_;
  TBranch *MjjL_up_branch;
  bool     MjjL_up_isLoaded;
  float    MjjL_dn_;
  TBranch *MjjL_dn_branch;
  bool     MjjL_dn_isLoaded;
  float    MjjL_jer_;
  TBranch *MjjL_jer_branch;
  bool     MjjL_jer_isLoaded;
  float    MjjL_jerup_;
  TBranch *MjjL_jerup_branch;
  bool     MjjL_jerup_isLoaded;
  float    MjjL_jerdn_;
  TBranch *MjjL_jerdn_branch;
  bool     MjjL_jerdn_isLoaded;
  float    DetajjL_;
  TBranch *DetajjL_branch;
  bool     DetajjL_isLoaded;
  float    DetajjL_up_;
  TBranch *DetajjL_up_branch;
  bool     DetajjL_up_isLoaded;
  float    DetajjL_dn_;
  TBranch *DetajjL_dn_branch;
  bool     DetajjL_dn_isLoaded;
  float    DetajjL_jer_;
  TBranch *DetajjL_jer_branch;
  bool     DetajjL_jer_isLoaded;
  float    DetajjL_jerup_;
  TBranch *DetajjL_jerup_branch;
  bool     DetajjL_jerup_isLoaded;
  float    DetajjL_jerdn_;
  TBranch *DetajjL_jerdn_branch;
  bool     DetajjL_jerdn_isLoaded;
  float    MllSS_;
  TBranch *MllSS_branch;
  bool     MllSS_isLoaded;
  float    MeeSS_;
  TBranch *MeeSS_branch;
  bool     MeeSS_isLoaded;
  float    Mll3L_;
  TBranch *Mll3L_branch;
  bool     Mll3L_isLoaded;
  float    Mee3L_;
  TBranch *Mee3L_branch;
  bool     Mee3L_isLoaded;
  float    Mll3L1_;
  TBranch *Mll3L1_branch;
  bool     Mll3L1_isLoaded;
  float    M3l_;
  TBranch *M3l_branch;
  bool     M3l_isLoaded;
  float    Pt3l_;
  TBranch *Pt3l_branch;
  bool     Pt3l_isLoaded;
  float    Pt2l_;
  TBranch *Pt2l_branch;
  bool     Pt2l_isLoaded;
  float    M01_;
  TBranch *M01_branch;
  bool     M01_isLoaded;
  float    M02_;
  TBranch *M02_branch;
  bool     M02_isLoaded;
  float    M12_;
  TBranch *M12_branch;
  bool     M12_isLoaded;
  int      isSFOS01_;
  TBranch *isSFOS01_branch;
  bool     isSFOS01_isLoaded;
  int      isSFOS02_;
  TBranch *isSFOS02_branch;
  bool     isSFOS02_isLoaded;
  int      isSFOS12_;
  TBranch *isSFOS12_branch;
  bool     isSFOS12_isLoaded;
  float    DPhi3lMET_;
  TBranch *DPhi3lMET_branch;
  bool     DPhi3lMET_isLoaded;
  float    DPhi3lMET_up_;
  TBranch *DPhi3lMET_up_branch;
  bool     DPhi3lMET_up_isLoaded;
  float    DPhi3lMET_dn_;
  TBranch *DPhi3lMET_dn_branch;
  bool     DPhi3lMET_dn_isLoaded;
  float    DPhi3lMET_jer_;
  TBranch *DPhi3lMET_jer_branch;
  bool     DPhi3lMET_jer_isLoaded;
  float    DPhi3lMET_jerup_;
  TBranch *DPhi3lMET_jerup_branch;
  bool     DPhi3lMET_jerup_isLoaded;
  float    DPhi3lMET_jerdn_;
  TBranch *DPhi3lMET_jerdn_branch;
  bool     DPhi3lMET_jerdn_isLoaded;
  float    DPhi3lMET_gen_;
  TBranch *DPhi3lMET_gen_branch;
  bool     DPhi3lMET_gen_isLoaded;
  float    MTmax_;
  TBranch *MTmax_branch;
  bool     MTmax_isLoaded;
  float    MTmax_up_;
  TBranch *MTmax_up_branch;
  bool     MTmax_up_isLoaded;
  float    MTmax_dn_;
  TBranch *MTmax_dn_branch;
  bool     MTmax_dn_isLoaded;
  float    MTmax_jer_;
  TBranch *MTmax_jer_branch;
  bool     MTmax_jer_isLoaded;
  float    MTmax_jerup_;
  TBranch *MTmax_jerup_branch;
  bool     MTmax_jerup_isLoaded;
  float    MTmax_jerdn_;
  TBranch *MTmax_jerdn_branch;
  bool     MTmax_jerdn_isLoaded;
  float    MTmax_gen_;
  TBranch *MTmax_gen_branch;
  bool     MTmax_gen_isLoaded;
  float    MTmin_;
  TBranch *MTmin_branch;
  bool     MTmin_isLoaded;
  float    MTmin_up_;
  TBranch *MTmin_up_branch;
  bool     MTmin_up_isLoaded;
  float    MTmin_dn_;
  TBranch *MTmin_dn_branch;
  bool     MTmin_dn_isLoaded;
  float    MTmin_jer_;
  TBranch *MTmin_jer_branch;
  bool     MTmin_jer_isLoaded;
  float    MTmin_jerup_;
  TBranch *MTmin_jerup_branch;
  bool     MTmin_jerup_isLoaded;
  float    MTmin_jerdn_;
  TBranch *MTmin_jerdn_branch;
  bool     MTmin_jerdn_isLoaded;
  float    MTmin_gen_;
  TBranch *MTmin_gen_branch;
  bool     MTmin_gen_isLoaded;
  float    MT3rd_;
  TBranch *MT3rd_branch;
  bool     MT3rd_isLoaded;
  float    MT3rd_up_;
  TBranch *MT3rd_up_branch;
  bool     MT3rd_up_isLoaded;
  float    MT3rd_dn_;
  TBranch *MT3rd_dn_branch;
  bool     MT3rd_dn_isLoaded;
  float    MT3rd_jer_;
  TBranch *MT3rd_jer_branch;
  bool     MT3rd_jer_isLoaded;
  float    MT3rd_jerup_;
  TBranch *MT3rd_jerup_branch;
  bool     MT3rd_jerup_isLoaded;
  float    MT3rd_jerdn_;
  TBranch *MT3rd_jerdn_branch;
  bool     MT3rd_jerdn_isLoaded;
  float    MT3rd_gen_;
  TBranch *MT3rd_gen_branch;
  bool     MT3rd_gen_isLoaded;
  float    MTmax3L_;
  TBranch *MTmax3L_branch;
  bool     MTmax3L_isLoaded;
  float    MTmax3L_up_;
  TBranch *MTmax3L_up_branch;
  bool     MTmax3L_up_isLoaded;
  float    MTmax3L_dn_;
  TBranch *MTmax3L_dn_branch;
  bool     MTmax3L_dn_isLoaded;
  float    MTmax3L_jer_;
  TBranch *MTmax3L_jer_branch;
  bool     MTmax3L_jer_isLoaded;
  float    MTmax3L_jerup_;
  TBranch *MTmax3L_jerup_branch;
  bool     MTmax3L_jerup_isLoaded;
  float    MTmax3L_jerdn_;
  TBranch *MTmax3L_jerdn_branch;
  bool     MTmax3L_jerdn_isLoaded;
  float    MTmax3L_gen_;
  TBranch *MTmax3L_gen_branch;
  bool     MTmax3L_gen_isLoaded;
  int      passSSee_;
  TBranch *passSSee_branch;
  bool     passSSee_isLoaded;
  int      passSSem_;
  TBranch *passSSem_branch;
  bool     passSSem_isLoaded;
  int      passSSmm_;
  TBranch *passSSmm_branch;
  bool     passSSmm_isLoaded;
  int      lep_idx0_SS_;
  TBranch *lep_idx0_SS_branch;
  bool     lep_idx0_SS_isLoaded;
  int      lep_idx1_SS_;
  TBranch *lep_idx1_SS_branch;
  bool     lep_idx1_SS_isLoaded;
  TString *bkgtype_;
  TBranch *bkgtype_branch;
  bool     bkgtype_isLoaded;
  int      vetophoton_;
  TBranch *vetophoton_branch;
  bool     vetophoton_isLoaded;
  float    purewgt_;
  TBranch *purewgt_branch;
  bool     purewgt_isLoaded;
  float    purewgt_up_;
  TBranch *purewgt_up_branch;
  bool     purewgt_up_isLoaded;
  float    purewgt_dn_;
  TBranch *purewgt_dn_branch;
  bool     purewgt_dn_isLoaded;
  float    ffwgt_;
  TBranch *ffwgt_branch;
  bool     ffwgt_isLoaded;
  float    ffwgt_up_;
  TBranch *ffwgt_up_branch;
  bool     ffwgt_up_isLoaded;
  float    ffwgt_dn_;
  TBranch *ffwgt_dn_branch;
  bool     ffwgt_dn_isLoaded;
  float    ffwgt_el_up_;
  TBranch *ffwgt_el_up_branch;
  bool     ffwgt_el_up_isLoaded;
  float    ffwgt_el_dn_;
  TBranch *ffwgt_el_dn_branch;
  bool     ffwgt_el_dn_isLoaded;
  float    ffwgt_mu_up_;
  TBranch *ffwgt_mu_up_branch;
  bool     ffwgt_mu_up_isLoaded;
  float    ffwgt_mu_dn_;
  TBranch *ffwgt_mu_dn_branch;
  bool     ffwgt_mu_dn_isLoaded;
  float    ffwgt_closure_up_;
  TBranch *ffwgt_closure_up_branch;
  bool     ffwgt_closure_up_isLoaded;
  float    ffwgt_closure_dn_;
  TBranch *ffwgt_closure_dn_branch;
  bool     ffwgt_closure_dn_isLoaded;
  float    ffwgt_closure_el_up_;
  TBranch *ffwgt_closure_el_up_branch;
  bool     ffwgt_closure_el_up_isLoaded;
  float    ffwgt_closure_el_dn_;
  TBranch *ffwgt_closure_el_dn_branch;
  bool     ffwgt_closure_el_dn_isLoaded;
  float    ffwgt_closure_mu_up_;
  TBranch *ffwgt_closure_mu_up_branch;
  bool     ffwgt_closure_mu_up_isLoaded;
  float    ffwgt_closure_mu_dn_;
  TBranch *ffwgt_closure_mu_dn_branch;
  bool     ffwgt_closure_mu_dn_isLoaded;
  float    ffwgt_full_up_;
  TBranch *ffwgt_full_up_branch;
  bool     ffwgt_full_up_isLoaded;
  float    ffwgt_full_dn_;
  TBranch *ffwgt_full_dn_branch;
  bool     ffwgt_full_dn_isLoaded;
  float    ffwgtqcd_;
  TBranch *ffwgtqcd_branch;
  bool     ffwgtqcd_isLoaded;
  float    ffwgtqcd_up_;
  TBranch *ffwgtqcd_up_branch;
  bool     ffwgtqcd_up_isLoaded;
  float    ffwgtqcd_dn_;
  TBranch *ffwgtqcd_dn_branch;
  bool     ffwgtqcd_dn_isLoaded;
  float    lepsf_;
  TBranch *lepsf_branch;
  bool     lepsf_isLoaded;
  float    lepsf_up_;
  TBranch *lepsf_up_branch;
  bool     lepsf_up_isLoaded;
  float    lepsf_dn_;
  TBranch *lepsf_dn_branch;
  bool     lepsf_dn_isLoaded;
  float    trigeff_;
  TBranch *trigeff_branch;
  bool     trigeff_isLoaded;
  float    trigeff_up_;
  TBranch *trigeff_up_branch;
  bool     trigeff_up_isLoaded;
  float    trigeff_dn_;
  TBranch *trigeff_dn_branch;
  bool     trigeff_dn_isLoaded;
  float    trigsf_;
  TBranch *trigsf_branch;
  bool     trigsf_isLoaded;
  float    trigsf_up_;
  TBranch *trigsf_up_branch;
  bool     trigsf_up_isLoaded;
  float    trigsf_dn_;
  TBranch *trigsf_dn_branch;
  bool     trigsf_dn_isLoaded;
  float    musmear_sf_;
  TBranch *musmear_sf_branch;
  bool     musmear_sf_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const int &isData();
  const float &evt_scale1fb();
  const float &xsec_br();
  const int &evt_passgoodrunlist();
  const TString &CMS4path();
  const int &CMS4index();
  const float &weight_fr_r1_f1();
  const float &weight_fr_r1_f2();
  const float &weight_fr_r1_f0p5();
  const float &weight_fr_r2_f1();
  const float &weight_fr_r2_f2();
  const float &weight_fr_r2_f0p5();
  const float &weight_fr_r0p5_f1();
  const float &weight_fr_r0p5_f2();
  const float &weight_fr_r0p5_f0p5();
  const float &weight_pdf_up();
  const float &weight_pdf_down();
  const float &weight_alphas_down();
  const float &weight_alphas_up();
  const float &weight_isr();
  const float &weight_isr_up();
  const float &weight_isr_down();
  const int &HLT_DoubleMu();
  const int &HLT_DoubleEl();
  const int &HLT_DoubleEl_DZ();
  const int &HLT_DoubleEl_DZ_2();
  const int &HLT_MuEG();
  const int &HLT_SingleEl8();
  const int &HLT_SingleEl17();
  const int &HLT_SingleIsoEl8();
  const int &HLT_SingleIsoEl12();
  const int &HLT_SingleIsoEl17();
  const int &HLT_SingleIsoEl23();
  const int &HLT_SingleIsoMu8();
  const int &HLT_SingleIsoMu17();
  const int &HLT_PFMET140_PFMHT140_IDTight();
  const int &mc_HLT_DoubleMu();
  const int &mc_HLT_DoubleEl();
  const int &mc_HLT_DoubleEl_DZ();
  const int &mc_HLT_DoubleEl_DZ_2();
  const int &mc_HLT_MuEG();
  const int &mc_HLT_SingleEl8();
  const int &mc_HLT_SingleEl17();
  const int &mc_HLT_SingleIsoEl8();
  const int &mc_HLT_SingleIsoEl12();
  const int &mc_HLT_SingleIsoEl17();
  const int &mc_HLT_SingleIsoEl23();
  const int &mc_HLT_SingleIsoMu8();
  const int &mc_HLT_SingleIsoMu17();
  const int &mc_HLT_PFMET140_PFMHT140_IDTight();
  const int &pass_duplicate_ee_em_mm();
  const int &pass_duplicate_mm_em_ee();
  const int &is2016();
  const int &is2017();
  const int &is2018();
  const int &HLT_MuEG_2016();
  const int &mc_HLT_MuEG_2016();
  const int &pass_duplicate_ee_em2016_mm();
  const int &pass_duplicate_mm_em2016_ee();
  const int &passTrigger();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &lep_p4();
  const vector<float> &lep_pt();
  const vector<float> &lep_eta();
  const vector<float> &lep_phi();
  const vector<float> &lep_coneCorrPt();
  const vector<float> &lep_ip3d();
  const vector<float> &lep_ip3derr();
  const vector<int> &lep_isTriggerSafe_v1();
  const vector<int> &lep_lostHits();
  const vector<int> &lep_convVeto();
  const vector<int> &lep_exp_innerlayers();
  const vector<int> &lep_motherIdSS();
  const vector<int> &lep_pass_VVV_cutbased_3l_fo();
  const vector<int> &lep_pass_VVV_cutbased_3l_tight();
  const vector<int> &lep_pass_VVV_cutbased_fo();
  const vector<int> &lep_pass_VVV_cutbased_tight();
  const vector<int> &lep_pass_VVV_cutbased_veto();
  const vector<int> &lep_pass_VVV_cutbased_fo_noiso();
  const vector<int> &lep_pass_VVV_cutbased_tight_noiso();
  const vector<int> &lep_pass_VVV_cutbased_veto_noiso();
  const vector<int> &lep_pass_VVV_3l_fo();
  const vector<int> &lep_pass_VVV_3l_tight();
  const vector<int> &lep_pass_VVV_fo();
  const vector<int> &lep_pass_VVV_tight();
  const vector<int> &lep_pass_VVV_veto();
  const vector<int> &lep_pass_VVV_fo_noiso();
  const vector<int> &lep_pass_VVV_tight_noiso();
  const vector<int> &lep_pass_VVV_veto_noiso();
  const vector<int> &lep_pass_POG_veto();
  const vector<int> &lep_pass_POG_loose();
  const vector<int> &lep_pass_POG_medium();
  const vector<int> &lep_pass_POG_tight();
  const vector<int> &lep_pdgId();
  const vector<float> &lep_dxy();
  const vector<float> &lep_dz();
  const vector<float> &lep_pterr();
  const vector<float> &lep_relIso04DB();
  const vector<float> &lep_relIso03EA();
  const vector<float> &lep_relIso03EALep();
  const vector<float> &lep_relIso03EAv2();
  const vector<float> &lep_relIso04EAv2();
  const vector<float> &lep_relIso03EAv2Lep();
  const vector<int> &lep_tightCharge();
  const vector<float> &lep_trk_pt();
  const vector<int> &lep_charge();
  const vector<float> &lep_etaSC();
  const vector<float> &lep_MVA();
  const vector<int> &lep_isLoosePOG();
  const vector<int> &lep_isMediumPOG();
  const vector<int> &lep_isTightPOG();
  const vector<int> &lep_isFromW();
  const vector<int> &lep_isFromZ();
  const vector<int> &lep_isFromB();
  const vector<int> &lep_isFromC();
  const vector<int> &lep_isFromL();
  const vector<int> &lep_isFromLF();
  const vector<int> &lep_genPart_index();
  const vector<float> &lep_r9();
  const vector<int> &lep_nlayers();
  const float &el_pt();
  const float &el_eta();
  const float &el_phi();
  const float &el_relIso03EA();
  const float &el_relIso03EALep();
  const float &el_ip3d();
  const float &mu_pt();
  const float &mu_eta();
  const float &mu_phi();
  const float &mu_relIso04DB();
  const float &mu_relIso03EA();
  const float &mu_relIso03EALep();
  const float &mu_ip3d();
  const float &lbnt_pt();
  const float &lbnt_coneCorrPt();
  const float &lbnt_abseta();
  const float &lbnt_pdgId();
  const float &lbnt_el_pt();
  const float &lbnt_el_coneCorrPt();
  const float &lbnt_el_abseta();
  const float &lbnt_mu_pt();
  const float &lbnt_mu_coneCorrPt();
  const float &lbnt_mu_abseta();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_up_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_dn_p4();
  const vector<float> &jets_btag_score();
  const vector<float> &jets_up_btag_score();
  const vector<float> &jets_dn_btag_score();
  const vector<float> &jets_jer_btag_score();
  const vector<float> &jets_jerup_btag_score();
  const vector<float> &jets_jerdn_btag_score();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_jer_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_jerup_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_jerdn_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets30_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets30_up_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets30_dn_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets30_jer_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets30_jerup_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets30_jerdn_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_p4();
  const vector<float> &ak8jets_softdropMass();
  const vector<float> &ak8jets_prunedMass();
  const vector<float> &ak8jets_trimmedMass();
  const vector<float> &ak8jets_mass();
  const vector<float> &ak8jets_nJettinessTau1();
  const vector<float> &ak8jets_nJettinessTau2();
  const vector<float> &ak8jets_softdropPuppiSubjet1();
  const vector<float> &ak8jets_softdropPuppiSubjet2();
  const vector<float> &ak8jets_puppi_softdropMass();
  const vector<float> &ak8jets_puppi_nJettinessTau1();
  const vector<float> &ak8jets_puppi_nJettinessTau2();
  const vector<float> &ak8jets_puppi_eta();
  const vector<float> &ak8jets_puppi_phi();
  const vector<float> &ak8jets_puppi_pt();
  const vector<float> &ak8jets_puppi_mass();
  const vector<float> &ak8jets_deep_rawdisc_h4q();
  const vector<float> &ak8jets_deep_rawdisc_hbb();
  const vector<float> &ak8jets_deep_rawdisc_top();
  const vector<float> &ak8jets_deep_rawdisc_qcd();
  const vector<float> &ak8jets_deep_rawdisc_w();
  const vector<float> &ak8jets_deep_rawdisc_z();
  const vector<float> &ak8jets_deep_rawdisc_zbb();
  const float &met_pt();
  const float &met_phi();
  const float &met_up_pt();
  const float &met_up_phi();
  const float &met_dn_pt();
  const float &met_dn_phi();
  const float &met_gen_pt();
  const float &met_gen_phi();
  const float &met_jer_pt();
  const float &met_jerup_pt();
  const float &met_jerdn_pt();
  const float &met_jer_phi();
  const float &met_jerup_phi();
  const float &met_jerdn_phi();
  const int &firstgoodvertex();
  const int &nTrueInt();
  const int &nVert();
  const int &nisoTrack_mt2_cleaned_VVV_cutbased_veto();
  const float &weight_btagsf();
  const float &weight_btagsf_heavy_DN();
  const float &weight_btagsf_heavy_UP();
  const float &weight_btagsf_light_DN();
  const float &weight_btagsf_light_UP();
  const float &gen_ht();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genPart_p4();
  const vector<int> &genPart_motherId();
  const vector<int> &genPart_pdgId();
  const vector<int> &genPart_charge();
  const vector<int> &genPart_status();
  const int &ngenLep();
  const int &ngenLepFromTau();
  const int &ngenLepFromBoson();
  const int &passesMETfiltersRun2();
  const int &Flag_AllEventFilters();
  const int &Flag_EcalDeadCellTriggerPrimitiveFilter();
  const int &Flag_HBHEIsoNoiseFilter();
  const int &Flag_HBHENoiseFilter();
  const int &Flag_badChargedCandidateFilter();
  const int &Flag_badMuonFilter();
  const int &Flag_badMuonFilterv2();
  const int &Flag_badChargedCandidateFilterv2();
  const int &Flag_eeBadScFilter();
  const int &Flag_ecalBadCalibFilter();
  const int &Flag_globalTightHalo2016();
  const int &Flag_goodVertices();
  const int &Flag_ecalLaserCorrFilter();
  const int &Flag_hcalLaserEventFilter();
  const int &Flag_trackingFailureFilter();
  const int &Flag_CSCTightHaloFilter();
  const int &Flag_CSCTightHalo2015Filter();
  const int &Flag_badMuons();
  const int &Flag_duplicateMuons();
  const int &Flag_noBadMuons();
  const int &fastsimfilt();
  const int &nVlep();
  const int &nTlep();
  const int &nTlepSS();
  const int &nLlep();
  const int &nLlep3L();
  const int &nTlep3L();
  const int &nSFOS();
  const int &nSFOSinZ();
  const int &nj();
  const int &nj_up();
  const int &nj_dn();
  const int &nj_jer();
  const int &nj_jerup();
  const int &nj_jerdn();
  const int &nj30();
  const int &nj30_up();
  const int &nj30_dn();
  const int &nj30_jer();
  const int &nj30_jerup();
  const int &nj30_jerdn();
  const int &nb();
  const int &nb_up();
  const int &nb_dn();
  const int &nb_jer();
  const int &nb_jerup();
  const int &nb_jerdn();
  const float &Ml0j0();
  const float &Ml0j0_up();
  const float &Ml0j0_dn();
  const float &Ml0j0_jer();
  const float &Ml0j0_jerup();
  const float &Ml0j0_jerdn();
  const float &Ml0j1();
  const float &Ml0j1_up();
  const float &Ml0j1_dn();
  const float &Ml0j1_jer();
  const float &Ml0j1_jerup();
  const float &Ml0j1_jerdn();
  const float &Ml1j0();
  const float &Ml1j0_up();
  const float &Ml1j0_dn();
  const float &Ml1j0_jer();
  const float &Ml1j0_jerup();
  const float &Ml1j0_jerdn();
  const float &Ml1j1();
  const float &Ml1j1_up();
  const float &Ml1j1_dn();
  const float &Ml1j1_jer();
  const float &Ml1j1_jerup();
  const float &Ml1j1_jerdn();
  const float &MinMlj();
  const float &MinMlj_up();
  const float &MinMlj_dn();
  const float &MinMlj_jer();
  const float &MinMlj_jerup();
  const float &MinMlj_jerdn();
  const float &SumMinMlj01();
  const float &SumMinMlj01_up();
  const float &SumMinMlj01_dn();
  const float &SumMinMlj01_jer();
  const float &SumMinMlj01_jerup();
  const float &SumMinMlj01_jerdn();
  const float &MaxMlj();
  const float &MaxMlj_up();
  const float &MaxMlj_dn();
  const float &MaxMlj_jer();
  const float &MaxMlj_jerup();
  const float &MaxMlj_jerdn();
  const float &SumMlj();
  const float &SumMlj_up();
  const float &SumMlj_dn();
  const float &SumMlj_jer();
  const float &SumMlj_jerup();
  const float &SumMlj_jerdn();
  const float &Mljmin();
  const float &Mljmin_up();
  const float &Mljmin_dn();
  const float &Mljmin_jer();
  const float &Mljmin_jerup();
  const float &Mljmin_jerdn();
  const float &Mljmax();
  const float &Mljmax_up();
  const float &Mljmax_dn();
  const float &Mljmax_jer();
  const float &Mljmax_jerup();
  const float &Mljmax_jerdn();
  const float &DRljmin();
  const float &DRljmin_up();
  const float &DRljmin_dn();
  const float &DRljmin_jer();
  const float &DRljmin_jerup();
  const float &DRljmin_jerdn();
  const float &DRljmax();
  const float &DRljmax_up();
  const float &DRljmax_dn();
  const float &DRljmax_jer();
  const float &DRljmax_jerup();
  const float &DRljmax_jerdn();
  const float &Mljmin3L();
  const float &Mljmin3L_up();
  const float &Mljmin3L_dn();
  const float &Mljmin3L_jer();
  const float &Mljmin3L_jerup();
  const float &Mljmin3L_jerdn();
  const float &Mljmax3L();
  const float &Mljmax3L_up();
  const float &Mljmax3L_dn();
  const float &Mljmax3L_jer();
  const float &Mljmax3L_jerup();
  const float &Mljmax3L_jerdn();
  const float &DRljmin3L();
  const float &DRljmin3L_up();
  const float &DRljmin3L_dn();
  const float &DRljmin3L_jer();
  const float &DRljmin3L_jerup();
  const float &DRljmin3L_jerdn();
  const float &DRljmax3L();
  const float &DRljmax3L_up();
  const float &DRljmax3L_dn();
  const float &DRljmax3L_jer();
  const float &DRljmax3L_jerup();
  const float &DRljmax3L_jerdn();
  const float &Ml0jj();
  const float &Ml0jj_up();
  const float &Ml0jj_dn();
  const float &Ml0jj_jer();
  const float &Ml0jj_jerup();
  const float &Ml0jj_jerdn();
  const float &Ml1jj();
  const float &Ml1jj_up();
  const float &Ml1jj_dn();
  const float &Ml1jj_jer();
  const float &Ml1jj_jerup();
  const float &Ml1jj_jerdn();
  const float &MinMljj();
  const float &MinMljj_up();
  const float &MinMljj_dn();
  const float &MinMljj_jer();
  const float &MinMljj_jerup();
  const float &MinMljj_jerdn();
  const float &MaxMljj();
  const float &MaxMljj_up();
  const float &MaxMljj_dn();
  const float &MaxMljj_jer();
  const float &MaxMljj_jerup();
  const float &MaxMljj_jerdn();
  const float &SumMljj();
  const float &SumMljj_up();
  const float &SumMljj_dn();
  const float &SumMljj_jer();
  const float &SumMljj_jerup();
  const float &SumMljj_jerdn();
  const float &Mjj();
  const float &Mjj_up();
  const float &Mjj_dn();
  const float &Mjj_jer();
  const float &Mjj_jerup();
  const float &Mjj_jerdn();
  const float &DRjj();
  const float &DRjj_up();
  const float &DRjj_dn();
  const float &DRjj_jer();
  const float &DRjj_jerup();
  const float &DRjj_jerdn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_up();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_dn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_jer();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_jerup();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_jerdn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_up();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_dn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_jer();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_jerup();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_jerdn();
  const float &MjjDR1();
  const float &MjjDR1_up();
  const float &MjjDR1_dn();
  const float &MjjDR1_jer();
  const float &MjjDR1_jerup();
  const float &MjjDR1_jerdn();
  const float &DRjjDR1();
  const float &DRjjDR1_up();
  const float &DRjjDR1_dn();
  const float &DRjjDR1_jer();
  const float &DRjjDR1_jerup();
  const float &DRjjDR1_jerdn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_DR1();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_DR1_up();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_DR1_dn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_DR1_jer();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_DR1_jerup();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_DR1_jerdn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_DR1();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_DR1_up();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_DR1_dn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_DR1_jer();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_DR1_jerup();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_DR1_jerdn();
  const float &MjjVBF();
  const float &MjjVBF_up();
  const float &MjjVBF_dn();
  const float &MjjVBF_jer();
  const float &MjjVBF_jerup();
  const float &MjjVBF_jerdn();
  const float &DetajjVBF();
  const float &DetajjVBF_up();
  const float &DetajjVBF_dn();
  const float &DetajjVBF_jer();
  const float &DetajjVBF_jerup();
  const float &DetajjVBF_jerdn();
  const float &MjjL();
  const float &MjjL_up();
  const float &MjjL_dn();
  const float &MjjL_jer();
  const float &MjjL_jerup();
  const float &MjjL_jerdn();
  const float &DetajjL();
  const float &DetajjL_up();
  const float &DetajjL_dn();
  const float &DetajjL_jer();
  const float &DetajjL_jerup();
  const float &DetajjL_jerdn();
  const float &MllSS();
  const float &MeeSS();
  const float &Mll3L();
  const float &Mee3L();
  const float &Mll3L1();
  const float &M3l();
  const float &Pt3l();
  const float &Pt2l();
  const float &M01();
  const float &M02();
  const float &M12();
  const int &isSFOS01();
  const int &isSFOS02();
  const int &isSFOS12();
  const float &DPhi3lMET();
  const float &DPhi3lMET_up();
  const float &DPhi3lMET_dn();
  const float &DPhi3lMET_jer();
  const float &DPhi3lMET_jerup();
  const float &DPhi3lMET_jerdn();
  const float &DPhi3lMET_gen();
  const float &MTmax();
  const float &MTmax_up();
  const float &MTmax_dn();
  const float &MTmax_jer();
  const float &MTmax_jerup();
  const float &MTmax_jerdn();
  const float &MTmax_gen();
  const float &MTmin();
  const float &MTmin_up();
  const float &MTmin_dn();
  const float &MTmin_jer();
  const float &MTmin_jerup();
  const float &MTmin_jerdn();
  const float &MTmin_gen();
  const float &MT3rd();
  const float &MT3rd_up();
  const float &MT3rd_dn();
  const float &MT3rd_jer();
  const float &MT3rd_jerup();
  const float &MT3rd_jerdn();
  const float &MT3rd_gen();
  const float &MTmax3L();
  const float &MTmax3L_up();
  const float &MTmax3L_dn();
  const float &MTmax3L_jer();
  const float &MTmax3L_jerup();
  const float &MTmax3L_jerdn();
  const float &MTmax3L_gen();
  const int &passSSee();
  const int &passSSem();
  const int &passSSmm();
  const int &lep_idx0_SS();
  const int &lep_idx1_SS();
  const TString &bkgtype();
  const int &vetophoton();
  const float &purewgt();
  const float &purewgt_up();
  const float &purewgt_dn();
  const float &ffwgt();
  const float &ffwgt_up();
  const float &ffwgt_dn();
  const float &ffwgt_el_up();
  const float &ffwgt_el_dn();
  const float &ffwgt_mu_up();
  const float &ffwgt_mu_dn();
  const float &ffwgt_closure_up();
  const float &ffwgt_closure_dn();
  const float &ffwgt_closure_el_up();
  const float &ffwgt_closure_el_dn();
  const float &ffwgt_closure_mu_up();
  const float &ffwgt_closure_mu_dn();
  const float &ffwgt_full_up();
  const float &ffwgt_full_dn();
  const float &ffwgtqcd();
  const float &ffwgtqcd_up();
  const float &ffwgtqcd_dn();
  const float &lepsf();
  const float &lepsf_up();
  const float &lepsf_dn();
  const float &trigeff();
  const float &trigeff_up();
  const float &trigeff_dn();
  const float &trigsf();
  const float &trigsf_up();
  const float &trigsf_dn();
  const float &musmear_sf();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern frtree fr;
#endif

namespace tas {
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const int &isData();
  const float &evt_scale1fb();
  const float &xsec_br();
  const int &evt_passgoodrunlist();
  const TString &CMS4path();
  const int &CMS4index();
  const float &weight_fr_r1_f1();
  const float &weight_fr_r1_f2();
  const float &weight_fr_r1_f0p5();
  const float &weight_fr_r2_f1();
  const float &weight_fr_r2_f2();
  const float &weight_fr_r2_f0p5();
  const float &weight_fr_r0p5_f1();
  const float &weight_fr_r0p5_f2();
  const float &weight_fr_r0p5_f0p5();
  const float &weight_pdf_up();
  const float &weight_pdf_down();
  const float &weight_alphas_down();
  const float &weight_alphas_up();
  const float &weight_isr();
  const float &weight_isr_up();
  const float &weight_isr_down();
  const int &HLT_DoubleMu();
  const int &HLT_DoubleEl();
  const int &HLT_DoubleEl_DZ();
  const int &HLT_DoubleEl_DZ_2();
  const int &HLT_MuEG();
  const int &HLT_SingleEl8();
  const int &HLT_SingleEl17();
  const int &HLT_SingleIsoEl8();
  const int &HLT_SingleIsoEl12();
  const int &HLT_SingleIsoEl17();
  const int &HLT_SingleIsoEl23();
  const int &HLT_SingleIsoMu8();
  const int &HLT_SingleIsoMu17();
  const int &HLT_PFMET140_PFMHT140_IDTight();
  const int &mc_HLT_DoubleMu();
  const int &mc_HLT_DoubleEl();
  const int &mc_HLT_DoubleEl_DZ();
  const int &mc_HLT_DoubleEl_DZ_2();
  const int &mc_HLT_MuEG();
  const int &mc_HLT_SingleEl8();
  const int &mc_HLT_SingleEl17();
  const int &mc_HLT_SingleIsoEl8();
  const int &mc_HLT_SingleIsoEl12();
  const int &mc_HLT_SingleIsoEl17();
  const int &mc_HLT_SingleIsoEl23();
  const int &mc_HLT_SingleIsoMu8();
  const int &mc_HLT_SingleIsoMu17();
  const int &mc_HLT_PFMET140_PFMHT140_IDTight();
  const int &pass_duplicate_ee_em_mm();
  const int &pass_duplicate_mm_em_ee();
  const int &is2016();
  const int &is2017();
  const int &is2018();
  const int &HLT_MuEG_2016();
  const int &mc_HLT_MuEG_2016();
  const int &pass_duplicate_ee_em2016_mm();
  const int &pass_duplicate_mm_em2016_ee();
  const int &passTrigger();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &lep_p4();
  const vector<float> &lep_pt();
  const vector<float> &lep_eta();
  const vector<float> &lep_phi();
  const vector<float> &lep_coneCorrPt();
  const vector<float> &lep_ip3d();
  const vector<float> &lep_ip3derr();
  const vector<int> &lep_isTriggerSafe_v1();
  const vector<int> &lep_lostHits();
  const vector<int> &lep_convVeto();
  const vector<int> &lep_exp_innerlayers();
  const vector<int> &lep_motherIdSS();
  const vector<int> &lep_pass_VVV_cutbased_3l_fo();
  const vector<int> &lep_pass_VVV_cutbased_3l_tight();
  const vector<int> &lep_pass_VVV_cutbased_fo();
  const vector<int> &lep_pass_VVV_cutbased_tight();
  const vector<int> &lep_pass_VVV_cutbased_veto();
  const vector<int> &lep_pass_VVV_cutbased_fo_noiso();
  const vector<int> &lep_pass_VVV_cutbased_tight_noiso();
  const vector<int> &lep_pass_VVV_cutbased_veto_noiso();
  const vector<int> &lep_pass_VVV_3l_fo();
  const vector<int> &lep_pass_VVV_3l_tight();
  const vector<int> &lep_pass_VVV_fo();
  const vector<int> &lep_pass_VVV_tight();
  const vector<int> &lep_pass_VVV_veto();
  const vector<int> &lep_pass_VVV_fo_noiso();
  const vector<int> &lep_pass_VVV_tight_noiso();
  const vector<int> &lep_pass_VVV_veto_noiso();
  const vector<int> &lep_pass_POG_veto();
  const vector<int> &lep_pass_POG_loose();
  const vector<int> &lep_pass_POG_medium();
  const vector<int> &lep_pass_POG_tight();
  const vector<int> &lep_pdgId();
  const vector<float> &lep_dxy();
  const vector<float> &lep_dz();
  const vector<float> &lep_pterr();
  const vector<float> &lep_relIso04DB();
  const vector<float> &lep_relIso03EA();
  const vector<float> &lep_relIso03EALep();
  const vector<float> &lep_relIso03EAv2();
  const vector<float> &lep_relIso04EAv2();
  const vector<float> &lep_relIso03EAv2Lep();
  const vector<int> &lep_tightCharge();
  const vector<float> &lep_trk_pt();
  const vector<int> &lep_charge();
  const vector<float> &lep_etaSC();
  const vector<float> &lep_MVA();
  const vector<int> &lep_isLoosePOG();
  const vector<int> &lep_isMediumPOG();
  const vector<int> &lep_isTightPOG();
  const vector<int> &lep_isFromW();
  const vector<int> &lep_isFromZ();
  const vector<int> &lep_isFromB();
  const vector<int> &lep_isFromC();
  const vector<int> &lep_isFromL();
  const vector<int> &lep_isFromLF();
  const vector<int> &lep_genPart_index();
  const vector<float> &lep_r9();
  const vector<int> &lep_nlayers();
  const float &el_pt();
  const float &el_eta();
  const float &el_phi();
  const float &el_relIso03EA();
  const float &el_relIso03EALep();
  const float &el_ip3d();
  const float &mu_pt();
  const float &mu_eta();
  const float &mu_phi();
  const float &mu_relIso04DB();
  const float &mu_relIso03EA();
  const float &mu_relIso03EALep();
  const float &mu_ip3d();
  const float &lbnt_pt();
  const float &lbnt_coneCorrPt();
  const float &lbnt_abseta();
  const float &lbnt_pdgId();
  const float &lbnt_el_pt();
  const float &lbnt_el_coneCorrPt();
  const float &lbnt_el_abseta();
  const float &lbnt_mu_pt();
  const float &lbnt_mu_coneCorrPt();
  const float &lbnt_mu_abseta();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_up_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_dn_p4();
  const vector<float> &jets_btag_score();
  const vector<float> &jets_up_btag_score();
  const vector<float> &jets_dn_btag_score();
  const vector<float> &jets_jer_btag_score();
  const vector<float> &jets_jerup_btag_score();
  const vector<float> &jets_jerdn_btag_score();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_jer_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_jerup_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_jerdn_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets30_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets30_up_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets30_dn_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets30_jer_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets30_jerup_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets30_jerdn_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_p4();
  const vector<float> &ak8jets_softdropMass();
  const vector<float> &ak8jets_prunedMass();
  const vector<float> &ak8jets_trimmedMass();
  const vector<float> &ak8jets_mass();
  const vector<float> &ak8jets_nJettinessTau1();
  const vector<float> &ak8jets_nJettinessTau2();
  const vector<float> &ak8jets_softdropPuppiSubjet1();
  const vector<float> &ak8jets_softdropPuppiSubjet2();
  const vector<float> &ak8jets_puppi_softdropMass();
  const vector<float> &ak8jets_puppi_nJettinessTau1();
  const vector<float> &ak8jets_puppi_nJettinessTau2();
  const vector<float> &ak8jets_puppi_eta();
  const vector<float> &ak8jets_puppi_phi();
  const vector<float> &ak8jets_puppi_pt();
  const vector<float> &ak8jets_puppi_mass();
  const vector<float> &ak8jets_deep_rawdisc_h4q();
  const vector<float> &ak8jets_deep_rawdisc_hbb();
  const vector<float> &ak8jets_deep_rawdisc_top();
  const vector<float> &ak8jets_deep_rawdisc_qcd();
  const vector<float> &ak8jets_deep_rawdisc_w();
  const vector<float> &ak8jets_deep_rawdisc_z();
  const vector<float> &ak8jets_deep_rawdisc_zbb();
  const float &met_pt();
  const float &met_phi();
  const float &met_up_pt();
  const float &met_up_phi();
  const float &met_dn_pt();
  const float &met_dn_phi();
  const float &met_gen_pt();
  const float &met_gen_phi();
  const float &met_jer_pt();
  const float &met_jerup_pt();
  const float &met_jerdn_pt();
  const float &met_jer_phi();
  const float &met_jerup_phi();
  const float &met_jerdn_phi();
  const int &firstgoodvertex();
  const int &nTrueInt();
  const int &nVert();
  const int &nisoTrack_mt2_cleaned_VVV_cutbased_veto();
  const float &weight_btagsf();
  const float &weight_btagsf_heavy_DN();
  const float &weight_btagsf_heavy_UP();
  const float &weight_btagsf_light_DN();
  const float &weight_btagsf_light_UP();
  const float &gen_ht();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genPart_p4();
  const vector<int> &genPart_motherId();
  const vector<int> &genPart_pdgId();
  const vector<int> &genPart_charge();
  const vector<int> &genPart_status();
  const int &ngenLep();
  const int &ngenLepFromTau();
  const int &ngenLepFromBoson();
  const int &passesMETfiltersRun2();
  const int &Flag_AllEventFilters();
  const int &Flag_EcalDeadCellTriggerPrimitiveFilter();
  const int &Flag_HBHEIsoNoiseFilter();
  const int &Flag_HBHENoiseFilter();
  const int &Flag_badChargedCandidateFilter();
  const int &Flag_badMuonFilter();
  const int &Flag_badMuonFilterv2();
  const int &Flag_badChargedCandidateFilterv2();
  const int &Flag_eeBadScFilter();
  const int &Flag_ecalBadCalibFilter();
  const int &Flag_globalTightHalo2016();
  const int &Flag_goodVertices();
  const int &Flag_ecalLaserCorrFilter();
  const int &Flag_hcalLaserEventFilter();
  const int &Flag_trackingFailureFilter();
  const int &Flag_CSCTightHaloFilter();
  const int &Flag_CSCTightHalo2015Filter();
  const int &Flag_badMuons();
  const int &Flag_duplicateMuons();
  const int &Flag_noBadMuons();
  const int &fastsimfilt();
  const int &nVlep();
  const int &nTlep();
  const int &nTlepSS();
  const int &nLlep();
  const int &nLlep3L();
  const int &nTlep3L();
  const int &nSFOS();
  const int &nSFOSinZ();
  const int &nj();
  const int &nj_up();
  const int &nj_dn();
  const int &nj_jer();
  const int &nj_jerup();
  const int &nj_jerdn();
  const int &nj30();
  const int &nj30_up();
  const int &nj30_dn();
  const int &nj30_jer();
  const int &nj30_jerup();
  const int &nj30_jerdn();
  const int &nb();
  const int &nb_up();
  const int &nb_dn();
  const int &nb_jer();
  const int &nb_jerup();
  const int &nb_jerdn();
  const float &Ml0j0();
  const float &Ml0j0_up();
  const float &Ml0j0_dn();
  const float &Ml0j0_jer();
  const float &Ml0j0_jerup();
  const float &Ml0j0_jerdn();
  const float &Ml0j1();
  const float &Ml0j1_up();
  const float &Ml0j1_dn();
  const float &Ml0j1_jer();
  const float &Ml0j1_jerup();
  const float &Ml0j1_jerdn();
  const float &Ml1j0();
  const float &Ml1j0_up();
  const float &Ml1j0_dn();
  const float &Ml1j0_jer();
  const float &Ml1j0_jerup();
  const float &Ml1j0_jerdn();
  const float &Ml1j1();
  const float &Ml1j1_up();
  const float &Ml1j1_dn();
  const float &Ml1j1_jer();
  const float &Ml1j1_jerup();
  const float &Ml1j1_jerdn();
  const float &MinMlj();
  const float &MinMlj_up();
  const float &MinMlj_dn();
  const float &MinMlj_jer();
  const float &MinMlj_jerup();
  const float &MinMlj_jerdn();
  const float &SumMinMlj01();
  const float &SumMinMlj01_up();
  const float &SumMinMlj01_dn();
  const float &SumMinMlj01_jer();
  const float &SumMinMlj01_jerup();
  const float &SumMinMlj01_jerdn();
  const float &MaxMlj();
  const float &MaxMlj_up();
  const float &MaxMlj_dn();
  const float &MaxMlj_jer();
  const float &MaxMlj_jerup();
  const float &MaxMlj_jerdn();
  const float &SumMlj();
  const float &SumMlj_up();
  const float &SumMlj_dn();
  const float &SumMlj_jer();
  const float &SumMlj_jerup();
  const float &SumMlj_jerdn();
  const float &Mljmin();
  const float &Mljmin_up();
  const float &Mljmin_dn();
  const float &Mljmin_jer();
  const float &Mljmin_jerup();
  const float &Mljmin_jerdn();
  const float &Mljmax();
  const float &Mljmax_up();
  const float &Mljmax_dn();
  const float &Mljmax_jer();
  const float &Mljmax_jerup();
  const float &Mljmax_jerdn();
  const float &DRljmin();
  const float &DRljmin_up();
  const float &DRljmin_dn();
  const float &DRljmin_jer();
  const float &DRljmin_jerup();
  const float &DRljmin_jerdn();
  const float &DRljmax();
  const float &DRljmax_up();
  const float &DRljmax_dn();
  const float &DRljmax_jer();
  const float &DRljmax_jerup();
  const float &DRljmax_jerdn();
  const float &Mljmin3L();
  const float &Mljmin3L_up();
  const float &Mljmin3L_dn();
  const float &Mljmin3L_jer();
  const float &Mljmin3L_jerup();
  const float &Mljmin3L_jerdn();
  const float &Mljmax3L();
  const float &Mljmax3L_up();
  const float &Mljmax3L_dn();
  const float &Mljmax3L_jer();
  const float &Mljmax3L_jerup();
  const float &Mljmax3L_jerdn();
  const float &DRljmin3L();
  const float &DRljmin3L_up();
  const float &DRljmin3L_dn();
  const float &DRljmin3L_jer();
  const float &DRljmin3L_jerup();
  const float &DRljmin3L_jerdn();
  const float &DRljmax3L();
  const float &DRljmax3L_up();
  const float &DRljmax3L_dn();
  const float &DRljmax3L_jer();
  const float &DRljmax3L_jerup();
  const float &DRljmax3L_jerdn();
  const float &Ml0jj();
  const float &Ml0jj_up();
  const float &Ml0jj_dn();
  const float &Ml0jj_jer();
  const float &Ml0jj_jerup();
  const float &Ml0jj_jerdn();
  const float &Ml1jj();
  const float &Ml1jj_up();
  const float &Ml1jj_dn();
  const float &Ml1jj_jer();
  const float &Ml1jj_jerup();
  const float &Ml1jj_jerdn();
  const float &MinMljj();
  const float &MinMljj_up();
  const float &MinMljj_dn();
  const float &MinMljj_jer();
  const float &MinMljj_jerup();
  const float &MinMljj_jerdn();
  const float &MaxMljj();
  const float &MaxMljj_up();
  const float &MaxMljj_dn();
  const float &MaxMljj_jer();
  const float &MaxMljj_jerup();
  const float &MaxMljj_jerdn();
  const float &SumMljj();
  const float &SumMljj_up();
  const float &SumMljj_dn();
  const float &SumMljj_jer();
  const float &SumMljj_jerup();
  const float &SumMljj_jerdn();
  const float &Mjj();
  const float &Mjj_up();
  const float &Mjj_dn();
  const float &Mjj_jer();
  const float &Mjj_jerup();
  const float &Mjj_jerdn();
  const float &DRjj();
  const float &DRjj_up();
  const float &DRjj_dn();
  const float &DRjj_jer();
  const float &DRjj_jerup();
  const float &DRjj_jerdn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_up();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_dn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_jer();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_jerup();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_jerdn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_up();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_dn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_jer();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_jerup();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_jerdn();
  const float &MjjDR1();
  const float &MjjDR1_up();
  const float &MjjDR1_dn();
  const float &MjjDR1_jer();
  const float &MjjDR1_jerup();
  const float &MjjDR1_jerdn();
  const float &DRjjDR1();
  const float &DRjjDR1_up();
  const float &DRjjDR1_dn();
  const float &DRjjDR1_jer();
  const float &DRjjDR1_jerup();
  const float &DRjjDR1_jerdn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_DR1();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_DR1_up();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_DR1_dn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_DR1_jer();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_DR1_jerup();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet0_wtag_p4_DR1_jerdn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_DR1();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_DR1_up();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_DR1_dn();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_DR1_jer();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_DR1_jerup();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &jet1_wtag_p4_DR1_jerdn();
  const float &MjjVBF();
  const float &MjjVBF_up();
  const float &MjjVBF_dn();
  const float &MjjVBF_jer();
  const float &MjjVBF_jerup();
  const float &MjjVBF_jerdn();
  const float &DetajjVBF();
  const float &DetajjVBF_up();
  const float &DetajjVBF_dn();
  const float &DetajjVBF_jer();
  const float &DetajjVBF_jerup();
  const float &DetajjVBF_jerdn();
  const float &MjjL();
  const float &MjjL_up();
  const float &MjjL_dn();
  const float &MjjL_jer();
  const float &MjjL_jerup();
  const float &MjjL_jerdn();
  const float &DetajjL();
  const float &DetajjL_up();
  const float &DetajjL_dn();
  const float &DetajjL_jer();
  const float &DetajjL_jerup();
  const float &DetajjL_jerdn();
  const float &MllSS();
  const float &MeeSS();
  const float &Mll3L();
  const float &Mee3L();
  const float &Mll3L1();
  const float &M3l();
  const float &Pt3l();
  const float &Pt2l();
  const float &M01();
  const float &M02();
  const float &M12();
  const int &isSFOS01();
  const int &isSFOS02();
  const int &isSFOS12();
  const float &DPhi3lMET();
  const float &DPhi3lMET_up();
  const float &DPhi3lMET_dn();
  const float &DPhi3lMET_jer();
  const float &DPhi3lMET_jerup();
  const float &DPhi3lMET_jerdn();
  const float &DPhi3lMET_gen();
  const float &MTmax();
  const float &MTmax_up();
  const float &MTmax_dn();
  const float &MTmax_jer();
  const float &MTmax_jerup();
  const float &MTmax_jerdn();
  const float &MTmax_gen();
  const float &MTmin();
  const float &MTmin_up();
  const float &MTmin_dn();
  const float &MTmin_jer();
  const float &MTmin_jerup();
  const float &MTmin_jerdn();
  const float &MTmin_gen();
  const float &MT3rd();
  const float &MT3rd_up();
  const float &MT3rd_dn();
  const float &MT3rd_jer();
  const float &MT3rd_jerup();
  const float &MT3rd_jerdn();
  const float &MT3rd_gen();
  const float &MTmax3L();
  const float &MTmax3L_up();
  const float &MTmax3L_dn();
  const float &MTmax3L_jer();
  const float &MTmax3L_jerup();
  const float &MTmax3L_jerdn();
  const float &MTmax3L_gen();
  const int &passSSee();
  const int &passSSem();
  const int &passSSmm();
  const int &lep_idx0_SS();
  const int &lep_idx1_SS();
  const TString &bkgtype();
  const int &vetophoton();
  const float &purewgt();
  const float &purewgt_up();
  const float &purewgt_dn();
  const float &ffwgt();
  const float &ffwgt_up();
  const float &ffwgt_dn();
  const float &ffwgt_el_up();
  const float &ffwgt_el_dn();
  const float &ffwgt_mu_up();
  const float &ffwgt_mu_dn();
  const float &ffwgt_closure_up();
  const float &ffwgt_closure_dn();
  const float &ffwgt_closure_el_up();
  const float &ffwgt_closure_el_dn();
  const float &ffwgt_closure_mu_up();
  const float &ffwgt_closure_mu_dn();
  const float &ffwgt_full_up();
  const float &ffwgt_full_dn();
  const float &ffwgtqcd();
  const float &ffwgtqcd_up();
  const float &ffwgtqcd_dn();
  const float &lepsf();
  const float &lepsf_up();
  const float &lepsf_dn();
  const float &trigeff();
  const float &trigeff_up();
  const float &trigeff_dn();
  const float &trigsf();
  const float &trigsf_up();
  const float &trigsf_dn();
  const float &musmear_sf();
}
#include "rooutil.h"
#endif
